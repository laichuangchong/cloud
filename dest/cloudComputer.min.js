/*! cloud - v1.0.0 - 2018-01-30 */
private_cloud.controller("cloudComputerController", [ "$scope", "$sce", "$rootScope", "$http", "all_check_service", "$q", "$timeout", "$window", "$interval", "$location", "count_service", function(e, t, o, n, a, s, r, l, i, c, u) {
    function d(t, o) {
        t.vm = {
            state: o["OS-EXT-STS:vm_state"],
            text: e.vm_state[o["OS-EXT-STS:vm_state"]]
        }, t.task = {
            state: o["OS-EXT-STS:task_state"],
            text: e.task_state[o["OS-EXT-STS:task_state"]]
        }, t.power = {
            state: o["OS-EXT-STS:power_state"],
            text: e.power_state[o["OS-EXT-STS:power_state"]]
        };
    }
    function f(e, t) {
        angular.forEach(o.images, function(o, n) {
            t == o.id && (e.imageName = o.name);
        });
    }
    e.url = c.path(), e.warn = !1, e.warnText = [], e.vm_state = {
        building: "创建中",
        active: "运行中",
        rescued: "灾备运行",
        paused: "暂停",
        suspended: "挂起",
        stopped: "停止",
        soft_deleted: "软删除",
        hard_deleted: "应删除",
        resized: "确认/回退(调整配置)? ",
        error: "错误"
    }, e.task_state = {
        null: "无",
        building: "孵化",
        image_snapshotting: "正在创建快找",
        image_backingup: "备份",
        pausing: "暂停",
        unpausing: "暂停恢复",
        suspending: "正在挂起",
        resuming: "挂起恢复",
        deleting: "正在删除",
        stopping: "正在停止",
        starting: "正在启动",
        rescuing: "灾难恢复",
        unrescuing: "灾难复原",
        rebuilding: "正在重建",
        powering_on: "打开电源",
        powering_off: "关闭电源",
        resizing: "调整配置",
        resize_confirming: "配置调整确认",
        scheduling: "调度",
        block_device_mapping: "块设备映射",
        networking: "网络映射",
        spawning: "正在生成",
        reboot_started_hard: "正在重启",
        rebuild_spawning: "重建孵化中",
        "powering-off": "正在关闭电源",
        resize_finish: "已经重建"
    }, e.power_state = {
        0: "无",
        1: "运行中",
        3: "暂停",
        4: "关闭",
        6: "崩溃",
        7: "挂起"
    }, e.cloudHost = [], o.images_promise.promise.then(function() {
        n({
            url: "/api/list_servers/detail",
            method: "GET",
            headers: o.headers
        }).then(function(t) {
            var a = t.data.servers;
            console.log(a), angular.forEach(a, function(t, a) {
                var s = {};
                s.ipData = [], angular.forEach(t.addresses, function(e, t) {
                    angular.forEach(e, function(e, t) {
                        console.log(e), s.ipData.push(e);
                    });
                }), angular.forEach(o.flavors, function(e) {
                    e.id == t.flavor.id && (s.config = e);
                }), s.name = t.name, s.id = t.id;
                var r = t.image.id;
                d(s, t), s.diskConfig = t["OS-DCF:diskConfig"], console.log(s), f(s, r), null == t["OS-EXT-STS:task_state"] && n({
                    url: "/api/server_action/" + t.id,
                    method: "POST",
                    headers: o.headers,
                    data: {
                        "os-getVNCConsole": {
                            type: "novnc"
                        }
                    }
                }).then(function(e) {
                    s.vnc = e.data.console.url;
                }, function(e) {
                    alert(e.statusText);
                }), e.cloudHost.push(s), null != t["OS-EXT-STS:task_state"] && (e["intervalInit" + a] = i(function() {
                    n({
                        url: "/api/list_servers/" + s.id,
                        method: "GET",
                        headers: o.headers
                    }).then(function(s) {
                        console.log(s);
                        var r = s.data.server;
                        d(e.cloudHost[a], r), null == r["OS-EXT-STS:task_state"] && (e.cloudHost[a].ipData = [], 
                        e.cloudHost[a].vnc = "", console.log(r.addresses), angular.forEach(r.addresses, function(t) {
                            angular.forEach(t, function(t) {
                                e.cloudHost[a].ipData.push(t), console.log(e.cloudHost[a].ipData);
                            });
                        }), console.log(e.cloudHost[a].ipData), i.cancel(e["intervalInit" + a]), e["intervalInit" + a] = null, 
                        n({
                            url: "/api/server_action/" + t.id,
                            method: "POST",
                            headers: o.headers,
                            data: {
                                "os-getVNCConsole": {
                                    type: "novnc"
                                }
                            }
                        }).then(function(t) {
                            e.cloudHost[a].vnc = t.data.console.url;
                        }, function(e) {}));
                    }, function(e) {});
                }, 2e3)), e.$on("ngRepeatFinished", function(e) {
                    $("#config" + a).popover({
                        html: !0,
                        content: '<table class="table table-bordered table-striped table-condensed"><tbody><tr><td width="100px">VCPUs</td><td width="100px">' + s.config.vcpus + "</td></tr><tr><td>内存</td><td>" + s.config.ram / 1024 + "</td></tr><tr><td>大小</td><td>" + s.config.disk + "</td></tr></tbody></table>"
                    });
                });
            });
        }, function(e) {
            alert(e.statusText);
        });
    }, function() {}), e.deleteCloud = function(t, a, s) {
        confirm("您确定删除" + a + "吗？此操作不可恢复！") && n({
            url: "/api/list_servers/" + t,
            method: "DELETE",
            headers: o.headers
        }).then(function(t) {
            204 == t.status && (alert("操作成功"), e.cloudHost.splice(s, 1));
        }, function() {
            alert("操作失败请重试");
        });
    }, e.restartComputer = function(t, a) {
        n({
            url: "/api/server_action/" + t,
            method: "POST",
            headers: o.headers,
            data: {
                reboot: {
                    type: "HARD"
                }
            }
        }).then(function(s) {
            console.log(s), 202 == s.status && (alert(e.cloudHost[a].name + "重启成功"), e["restartComputer" + a] = i(function() {
                n({
                    url: "/api/list_servers/" + t,
                    method: "GET",
                    headers: o.headers
                }).then(function(t) {
                    console.log(t);
                    var o = t.data.server;
                    d(e.cloudHost[a], o), null == o["OS-EXT-STS:task_state"] && (i.cancel(e["restartComputer" + a]), 
                    e["restartComputer" + a] = null);
                }, function(e) {
                    alert(e.statusText);
                });
            }, 2e3));
        }, function(e) {
            alert(e.statusText);
        });
    }, e.all_check = !1, console.log(e.all_check), e.allCheck = function(t) {
        a.allCheck(t, e.cloudHost);
    }, e.itemCheck = function() {
        a.itemCheck(e, e.cloudHost);
    }, e.changeConfig = function(t) {
        e.coresChangeProgress = t.vcpus - e.oldConfig.vcpus, e.ramChangeProgress = t.ram / 1024 - e.oldConfig.ram / 1024;
    }, e.resetConfigInfo = function(t, o, n, a) {
        e.newConfig = t, e.diskConfig = o, e.cloudId = n, e.oldConfig = t, e.key = a, console.log(e.newConfig), 
        u.getCount();
    }, e.submitConfig = function() {
        console.log(e.cloudId), console.log(e.newConfig), console.log(e.diskConfig), n({
            url: "/api/server_action/" + e.cloudId,
            method: "POST",
            headers: o.headers,
            data: {
                resize: {
                    flavorRef: e.newConfig.id,
                    "OS-DCF:diskConfig": e.diskConfig
                }
            }
        }).then(function(t) {
            console.log(t), $("#reset_config").modal("hide"), e.intervalConfig = i(function() {
                n({
                    url: "/api/list_servers/" + e.cloudId,
                    method: "GET",
                    headers: o.headers
                }).then(function(t) {
                    console.log(t);
                    var o = t.data.server;
                    d(e.cloudHost[e.key], o), null == o["OS-EXT-STS:task_state"] && (i.cancel(e.intervalConfig), 
                    e.intervalConfig = null);
                }, function(e) {
                    alert(e.statusText);
                });
            }, 2e3);
        }, function(e) {
            alert(e.statusText);
        });
    }, e.confirmConfig = function(e, t) {
        n({
            url: "/api/server_action/" + e,
            method: "POST",
            headers: o.headers,
            data: {
                confirmResize: null
            }
        }).then(function(e) {
            console.log(e), l.location.reload();
        }, function(e) {
            alert(e.statusText);
        });
    }, e.returnConfig = function(e) {
        n({
            url: "/api/server_action/" + e,
            method: "POST",
            headers: o.headers,
            data: {
                revertResize: null
            }
        }).then(function(e) {
            console.log(e), l.location.reload();
        }, function(e) {
            alert(e.statusText);
        });
    }, e.reconstruction = function(t, o) {
        e.cloudId = t, e.key = o, console.log(e.key), e.selectImage = "";
    }, e.submitResetCloudComputer = function() {
        console.log(e.selectImage), n({
            url: "/api/server_action/" + e.cloudId,
            method: "POST",
            headers: o.headers,
            data: {
                rebuild: {
                    imageRef: e.selectImage
                }
            }
        }).then(function(t) {
            console.log(t), 202 == t.status && ($("#reset_cloud_computer").modal("hide"), f(e.cloudHost[e.key], e.selectImage), 
            e.intervalReconstruction = i(function() {
                n({
                    url: "/api/list_servers/" + e.cloudId,
                    method: "GET",
                    headers: o.headers
                }).then(function(t) {
                    console.log(t);
                    var o = t.data.server;
                    d(e.cloudHost[e.key], o), null == o["OS-EXT-STS:task_state"] && (i.cancel(e.intervalReconstruction), 
                    e.intervalReconstruction = null);
                }, function(e) {
                    alert(e.statusText);
                });
            }, 2e3));
        }, function(e) {
            alert(e.statusText);
        });
    }, e.searchCloud = "", e.showCloud = function(t) {
        return !e.searchCloud || -1 != t.indexOf(e.searchCloud);
    }, e.toggleComputer = function(t, a, s, r) {
        var l = {};
        l["os-" + t] = null, n({
            url: "/api/server_action/" + a,
            method: "POST",
            headers: o.headers,
            data: l
        }).then(function(t) {
            console.log(t), e["intervalToggle" + s] = i(function() {
                n({
                    url: "/api/list_servers/" + a,
                    method: "GET",
                    headers: o.headers
                }).then(function(t) {
                    console.log(t);
                    var o = t.data.server;
                    d(e.cloudHost[s], o), null == o["OS-EXT-STS:task_state"] && (i.cancel(e["intervalToggle" + s]), 
                    e["intervalToggle" + s] = null);
                }, function(e) {
                    alert(e.statusText);
                });
            }, 2e3);
        }, function(e) {
            alert(e.statusText);
        });
    };
} ]);
//# sourceMappingURL=cloudComputer.min.js.map