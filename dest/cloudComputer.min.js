/*! cloud - v1.0.0 - 2018-01-18 */
private_cloud.controller("cloudComputerController", [ "$scope", "$sce", "$rootScope", "$http", "all_check_service", "$q", "$timeout", function(e, a, t, o, r, n, s) {
    e.vm_state = {
        initialized: "创建",
        active: "运行",
        rescued: "灾备运行",
        paused: "暂停",
        suspended: "挂起",
        stopped: "停止",
        soft_deleted: "软删除",
        hard_deleted: "应删除",
        resized: "确认迁移",
        error: "错误"
    }, e.task_state = {
        null: "没有任务执行",
        budilding: "孵化",
        image_snapshotting: "正在创建快找",
        image_backingup: "备份",
        pausing: "暂停",
        unpausing: "暂停恢复",
        suspending: "正在挂起",
        resuming: "挂起恢复",
        deleting: "正在删除",
        stopping: "正在停止",
        starting: "正在启动",
        rescuing: "灾难恢复",
        unrescuing: "灾难复原",
        rebooting: "正在重启",
        rebuilding: "正在重建",
        powering_on: "打开电源",
        powering_off: "关闭电源",
        resizing: "调整配置",
        resize_confirming: "配置调整确认",
        scheduling: "调度",
        block_device_mapping: "块设备映射",
        networking: "网络映射",
        spawning: "正在生成"
    }, e.power_state = {
        0: "无",
        1: "运行中",
        3: "暂停",
        4: "关闭",
        6: "崩溃",
        7: "挂起"
    }, e.cloudHost = [], e.network_promise = n.defer(), o({
        url: "/api/list_images",
        method: "GET",
        headers: t.headers
    }).then(function(a) {
        console.log(a.data.images), e.images = a.data.images;
    }, function(e) {
        alert(e.data.error.message);
    }), o({
        url: "/api/list_flavors/detail",
        method: "GET",
        headers: t.headers
    }).then(function(a) {
        console.log(a), e.flavors = a.data.flavors;
    }, function(e) {
        alert(e.data.error.message);
    }), o({
        url: "/api/list_networks",
        method: "GET",
        headers: t.headers
    }).then(function(a) {
        console.log(a.data.networks), angular.forEach(a.data.networks, function(a, t) {
            switch (a["provider:network_type"]) {
              case "vxlan":
                e.fixedName = a.name;
                break;

              case "flat":
                e.floatingName = a.name;
            }
        }), console.log(e.fixedName), console.log(e.floatingName), e.network_promise.resolve();
    }, function(e) {
        alert(e.data.error.message);
    }), e.network_promise.promise.then(function() {
        o({
            url: "/api/list_servers/detail",
            method: "GET",
            headers: t.headers
        }).then(function(a) {
            console.log(a.data.servers);
            var r = a.data.servers;
            angular.forEach(r, function(a, r) {
                var n = {};
                n.ipData = [], console.log(a.addresses[e.fixedName]);
                var i = a.addresses[e.fixedName];
                angular.forEach(i, function(a, t) {
                    switch (a["OS-EXT-IPS:type"]) {
                      case "fixed":
                        n.ipData.push({
                            name: e.fixedName,
                            addr: a.addr
                        });
                        break;

                      case "floating":
                        n.ipData.push({
                            name: e.floatingName,
                            addr: a.addr
                        });
                    }
                });
                var d = a.flavor.id;
                angular.forEach(e.flavors, function(e) {
                    e.id == d && (console.log(r + " " + e.name), n.config = e.name, s(function() {
                        $("#config" + r).popover({
                            html: !0,
                            content: '<table class="table table-bordered table-striped table-condensed"><tbody><tr><td width="100px">VCPUs</td><td width="100px">' + e.vcpus + "</td></tr><tr><td>内存</td><td>" + e.ram / 1024 + "</td></tr><tr><td>大小</td><td>" + e.disk + "</td></tr></tbody></table>"
                        });
                    }, 100));
                }), n.name = a.name, n.id = a.id;
                var l = a.image.id;
                n.vmState = e.vm_state[a["OS-EXT-STS:vm_state"]], n.taskState = e.task_state[a["OS-EXT-STS:task_state"]], 
                n.powerState = e.power_state[a["OS-EXT-STS:power_state"]], angular.forEach(e.images, function(e, a) {
                    l == e.id && (n.imageName = e.name);
                }), o({
                    url: "/api/server_action/" + a.id,
                    method: "POST",
                    headers: t.headers,
                    data: {
                        "os-getVNCConsole": {
                            type: "novnc"
                        }
                    }
                }).then(function(e) {
                    console.log(e.data.console.url), n.vnc = e.data.console.url;
                }, function(e) {
                    alert(e.data.error.message);
                }), e.cloudHost.push(n);
            });
        }, function(e) {
            alert(e.data.error.message);
        });
    }), e.restart = function(e) {
        o({
            url: "/api/server_action/" + e,
            method: "POST",
            headers: t.headers,
            data: {
                reboot: {
                    type: "HARD"
                }
            }
        });
    }, e.all_check = !1, console.log(e.all_check), e.allCheck = function(a) {
        r.allCheck(a, e.cloudHost);
    }, e.itemCheck = function() {
        r.itemCheck(e, e.cloudHost);
    };
} ]);
//# sourceMappingURL=cloudComputer.min.js.map