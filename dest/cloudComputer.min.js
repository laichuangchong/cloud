/*! cloud - v1.0.0 - 2018-01-26 */
private_cloud.controller("cloudComputerController", [ "$scope", "$sce", "$rootScope", "$http", "all_check_service", "$q", "$timeout", "$window", "$interval", "$location", function(t, e, o, a, n, s, l, i, r, c) {
    t.url = c.path(), t.warn = !1, t.warnText = [], t.vm_state = {
        initialized: "创建",
        active: "运行",
        rescued: "灾备运行",
        paused: "暂停",
        suspended: "挂起",
        stopped: "停止",
        soft_deleted: "软删除",
        hard_deleted: "应删除",
        resized: "确认迁移",
        error: "错误"
    }, t.task_state = {
        null: "没有任务执行",
        building: "孵化",
        image_snapshotting: "正在创建快找",
        image_backingup: "备份",
        pausing: "暂停",
        unpausing: "暂停恢复",
        suspending: "正在挂起",
        resuming: "挂起恢复",
        deleting: "正在删除",
        stopping: "正在停止",
        starting: "正在启动",
        rescuing: "灾难恢复",
        unrescuing: "灾难复原",
        rebuilding: "正在重建",
        powering_on: "打开电源",
        powering_off: "关闭电源",
        resizing: "调整配置",
        resize_confirming: "配置调整确认",
        scheduling: "调度",
        block_device_mapping: "块设备映射",
        networking: "网络映射",
        spawning: "正在生成",
        reboot_started_hard: "正在重启",
        rebuild_spawning: "重建完成",
        "powering-off": "正在关闭电源"
    }, t.power_state = {
        0: "无",
        1: "运行中",
        3: "暂停",
        4: "关闭",
        6: "崩溃",
        7: "挂起"
    }, t.cloudHost = [], o.network_promise.promise.then(function() {
        a({
            url: "/api/list_servers/detail",
            method: "GET",
            headers: o.headers
        }).then(function(e) {
            var n = e.data.servers;
            console.log(n), angular.forEach(n, function(e, n) {
                var s = {};
                s.ipData = [], console.log(e.addresses), angular.forEach(e.addresses, function(t, e) {
                    angular.forEach(t, function(t, e) {
                        console.log(t), s.ipData.push(t);
                    });
                }), angular.forEach(o.flavors, function(t) {
                    t.id == e.flavor.id && (s.config = t);
                }), s.name = e.name, s.id = e.id;
                var l = e.image.id;
                s.vm = {
                    state: e["OS-EXT-STS:vm_state"],
                    text: t.vm_state[e["OS-EXT-STS:vm_state"]]
                }, s.task = {
                    state: e["OS-EXT-STS:task_state"],
                    text: t.task_state[e["OS-EXT-STS:task_state"]]
                }, s.power = {
                    state: e["OS-EXT-STS:power_state"],
                    text: t.power_state[e["OS-EXT-STS:power_state"]]
                }, s.diskConfig = e["OS-DCF:diskConfig"], console.log(s), angular.forEach(o.images, function(t, e) {
                    l == t.id && (s.imageName = t.name);
                }), a({
                    url: "/api/server_action/" + e.id,
                    method: "POST",
                    headers: o.headers,
                    data: {
                        "os-getVNCConsole": {
                            type: "novnc"
                        }
                    }
                }).then(function(t) {
                    s.vnc = t.data.console.url;
                }, function(t) {}), t.cloudHost.push(s), null != e["OS-EXT-STS:task_state"] && (t["intervalInit" + n] = r(function() {
                    a({
                        url: "/api/list_servers/" + s.id,
                        method: "GET",
                        headers: o.headers
                    }).then(function(e) {
                        console.log(e);
                        var o = e.data.server;
                        t.cloudHost[n].vm = {
                            state: o["OS-EXT-STS:vm_state"],
                            text: t.vm_state[o["OS-EXT-STS:vm_state"]]
                        }, t.cloudHost[n].task = {
                            state: o["OS-EXT-STS:task_state"],
                            text: t.task_state[o["OS-EXT-STS:task_state"]]
                        }, t.cloudHost[n].power = {
                            state: o["OS-EXT-STS:power_state"],
                            text: t.power_state[o["OS-EXT-STS:power_state"]]
                        }, null == o["OS-EXT-STS:task_state"] && (t.cloudHost[n].ipData = [], angular.forEach(o.addresses, function(e, o) {
                            angular.forEach(e, function(e, o) {
                                t.cloudHost[o].ipData.push(e);
                            });
                        }), r.cancel(t["intervalInit" + n]), t["intervalInit" + n] = null);
                    }, function(t) {});
                }, 2e3)), t.$on("ngRepeatFinished", function(t) {
                    $("#config" + n).popover({
                        html: !0,
                        content: '<table class="table table-bordered table-striped table-condensed"><tbody><tr><td width="100px">VCPUs</td><td width="100px">' + s.config.vcpus + "</td></tr><tr><td>内存</td><td>" + s.config.ram / 1024 + "</td></tr><tr><td>大小</td><td>" + s.config.disk + "</td></tr></tbody></table>"
                    });
                });
            });
        }, function(t) {});
    }), t.deleteCloud = function(e, n, s) {
        confirm("您确定删除" + n + "吗？此操作不可恢复！") && a({
            url: "/api/list_servers/" + e,
            method: "DELETE",
            headers: o.headers
        }).then(function(e) {
            204 == e.status && (alert("操作成功"), t.cloudHost.splice(s, 1));
        }, function() {
            alert("操作失败请重试");
        });
    }, t.restart = function(t) {
        a({
            url: "/api/server_action/" + t,
            method: "POST",
            headers: o.headers,
            data: {
                reboot: {
                    type: "HARD"
                }
            }
        }).then(function(t) {
            202 == t.status && i.location.reload();
        }, function(t) {});
    }, t.all_check = !1, console.log(t.all_check), t.allCheck = function(e) {
        n.allCheck(e, t.cloudHost);
    }, t.itemCheck = function() {
        n.itemCheck(t, t.cloudHost);
    }, t.resetConfigInfo = function(e, n, s) {
        t.newConfig = e, t.diskConfig = n, t.cloudId = s, t.oldConfig = e, console.log(t.newConfig), 
        a({
            url: "/api/nova_limits",
            method: "GET",
            headers: o.headers
        }).then(function(e) {
            console.log(e.data.limits.absolute);
            var o = e.data.limits.absolute;
            t.count = {
                instances: {
                    title: "云主机",
                    used: o.totalInstancesUsed,
                    total: o.maxTotalInstances,
                    unit: "个"
                },
                cores: {
                    title: "VCPUs",
                    used: o.totalCoresUsed,
                    total: o.maxTotalCores,
                    unit: "个"
                },
                ram: {
                    title: "内存",
                    used: o.totalRAMUsed / 1024,
                    total: o.maxTotalRAMSize / 1024,
                    unit: "GB"
                }
            };
        }, function(t) {
            console.log(t);
        });
    }, t.changeConfig = function(e) {
        t.coresChangeProgress = e.vcpus - t.oldConfig.vcpus, t.ramChangeProgress = e.ram / 1024 - t.oldConfig.ram / 1024;
    }, t.submitConfig = function() {
        console.log(t.cloudId), console.log(t.newConfig), console.log(t.diskConfig), a({
            url: "/api/server_action/" + t.cloudId,
            method: "POST",
            headers: o.headers,
            data: {
                resize: {
                    flavorRef: t.newConfig.id,
                    "OS-DCF:diskConfig": t.diskConfig
                }
            }
        }).then(function(t) {
            console.log(t), 202 == t.status && $("#myModal").modal("hide");
        }, function(t) {
            console.log(t);
        });
    }, t.reconstruction = function(e) {
        t.cloudId = e;
    }, t.submitResetCloudComputer = function() {
        console.log(t.selectImage), a({
            url: "/api/server_action/" + t.cloudId,
            method: "POST",
            headers: o.headers,
            data: {
                rebuild: {
                    imageRef: t.selectImage
                }
            }
        }).then(function(t) {
            console.log(t), 202 == t.status && i.location.reload();
        }, function() {});
    }, t.searchCloud = "", t.showCloud = function(e) {
        return !t.searchCloud || -1 != e.indexOf(t.searchCloud);
    }, t.globalToggle = function(e) {
        var n = {};
        n["os-" + e] = null, angular.forEach(t.cloudHost, function(e, s) {
            e.check_status && (console.log(e.id), a({
                url: "/api/server_action/" + e.id,
                method: "POST",
                headers: o.headers,
                data: n
            }).then(function(n) {
                console.log(n), t["intervalToggle" + s] = r(function() {
                    a({
                        url: "/api/list_servers/" + e.id,
                        method: "GET",
                        headers: o.headers
                    }).then(function(e) {
                        console.log(e);
                        var o = e.data.server;
                        t.cloudHost[s].vmState = t.vm_state[o["OS-EXT-STS:vm_state"]], t.cloudHost[s].taskState = t.task_state[o["OS-EXT-STS:task_state"]], 
                        t.cloudHost[s].powerState = t.power_state[o["OS-EXT-STS:power_state"]], null == o["OS-EXT-STS:task_state"] && (r.cancel(t["intervalToggle" + s]), 
                        t["intervalToggle" + s] = null);
                    }, function(t) {});
                }, 2e3);
            }, function(o) {
                console.log(o), t.warn = !0, t.warnText.push("错误" + o.status + " 云主机：" + e.name + "操作失败");
            }));
        });
    }, t.toggleComputer = function(e, n, s) {
        var l = {};
        l["os-" + e] = null, a({
            url: "/api/server_action/" + n,
            method: "POST",
            headers: o.headers,
            data: l
        }).then(function(e) {
            console.log(e), t["intervalToggle" + s] = r(function() {
                a({
                    url: "/api/list_servers/" + n,
                    method: "GET",
                    headers: o.headers
                }).then(function(e) {
                    console.log(e);
                    var o = e.data.server;
                    t.cloudHost[s].vm = {
                        state: o["OS-EXT-STS:vm_state"],
                        text: t.vm_state[o["OS-EXT-STS:vm_state"]]
                    }, t.cloudHost[s].task = {
                        state: o["OS-EXT-STS:task_state"],
                        text: t.task_state[o["OS-EXT-STS:task_state"]]
                    }, t.cloudHost[s].power = {
                        state: o["OS-EXT-STS:power_state"],
                        text: t.power_state[o["OS-EXT-STS:power_state"]]
                    }, null == o["OS-EXT-STS:task_state"] && (r.cancel(t["intervalToggle" + s]), t["intervalToggle" + s] = null);
                }, function(t) {});
            }, 2e3);
        }, function(e) {
            console.log(e), t.warn = !0, t.warnText.push("错误" + e.status + " 云主机：" + value.name + "操作失败");
        });
    };
} ]);
//# sourceMappingURL=cloudComputer.min.js.map