/*! cloud - v1.0.0 - 2018-03-05 */
private_cloud.controller("userNetworkController", [ "$scope", "$rootScope", "$http", "subnets_service", "$timeout", "$state", function(e, t, o, n, r, a) {
    e.subNetworkFormData = {
        enable_dhcp: !0,
        ip_version: 4
    }, n.getSubnets(), t.subnets_promise.promise.then(function(n) {
        o({
            url: "/api/net_networks/",
            headers: t.headers
        }).then(function(t) {
            console.log(t), e.networks = t.data.networks, angular.forEach(e.networks, function(t, o) {
                e.networks[o].subnetInfo = [], angular.forEach(t.subnets, function(t) {
                    angular.forEach(n, function(n) {
                        t == n.id && e.networks[o].subnetInfo.push(n);
                    });
                });
            });
        }, function(e) {
            alert(e.statusText);
        });
    }), e.editData = function(t) {
        console.log(t), e.networkId = t.id, e.editNetFormData = {
            name: t.name,
            admin_state_up: String(t.admin_state_up)
        };
    }, e.createSubNetwork = function(t) {
        e.currentNetwork = t, e.subNetworkFormData = {
            enable_dhcp: !0,
            network_id: t.id,
            ip_version: 4
        };
    }, e.formSubmit = function(n, s) {
        switch (s) {
          case "editNetwork":
            o({
                url: "/api/net_networks/" + e.networkId,
                method: "PUT",
                headers: t.headers,
                data: {
                    network: e.editNetFormData
                }
            }).then(function(e) {
                console.log(e), $("#edit_network").modal("hide"), r(function() {
                    a.go("network.userNetwork", {}, {
                        reload: !0
                    });
                }, 500);
            }, function(e) {
                alert(e.statusText);
            });
            break;

          case "subNetwork":
            o({
                url: "/api/net_subnets/",
                method: "POST",
                headers: t.headers,
                data: {
                    subnet: e.subNetworkFormData
                }
            }).then(function(e) {
                console.log(e), $("#create_subNetwork").modal("hide"), r(function() {
                    a.go("network.userNetwork", {}, {
                        reload: !0
                    });
                }, 500);
            }, function(e) {
                console.log(e.statusText);
            });
        }
    }, e.deleteNetwork = function(e) {
        confirm("您确定要删除" + e.name + "吗？该操纵无法撤销。") && o({
            url: "/api/net_subnets/" + e.id,
            method: "DELETE",
            headers: t.headers
        }).then(function(e) {
            console.log(e);
        }, function(e) {
            alert(e.statusText);
        });
    };
} ]);
//# sourceMappingURL=userNetwork.min.js.map