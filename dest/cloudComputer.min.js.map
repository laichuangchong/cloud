{"version":3,"sources":["../js/controller/cloudComputer.js"],"names":["private_cloud","controller","$scope","$rootScope","$http","all_check_service","$q","cloudHost","network_promise","defer","url","method","headers","then","response","console","log","data","networks","angular","forEach","value","key","fixedName","name","floatingName","resolve","alert","error","message","promise","servers","item","ipData","addresses","push","addr","imageId","image","id","imageName","flavor","config","all_check","allCheck","status","hostList","itemCheck"],"mappings":";AAGAA,cAAcC,WAAW,6BAA4B,UAAU,cAAc,SAAS,qBAAqB,MAAM,SAAUC,GAAQC,GAAYC,GAAOC,GAAkBC;IACpKJ,EAAOK,gBAEPL,EAAOM,kBAAkBF,EAAGG,SAC5BL;QACIM,KAAK;QACLC,QAAQ;QACRC,SAAST,EAAWS;OACrBC,KAAK,SAAUC;QACdC,QAAQC,IAAIF,EAASG,KAAKC,WAC1BC,QAAQC,QAAQN,EAASG,KAAKC,UAAU,SAAUG,GAAOC;YACrD,QAAQD,EAAM;cACV,KAAK;gBACDnB,EAAOqB,YAAYF,EAAMG;gBACzB;;cACJ,KAAK;gBACDtB,EAAOuB,eAAeJ,EAAMG;;YAKxCT,QAAQC,IAAId,EAAOqB,YACnBR,QAAQC,IAAId,EAAOuB,eACnBvB,EAAOM,gBAAgBkB;OACxB,SAAUZ;QACTa,MAAMb,EAASG,KAAKW,MAAMC;QAE9B3B,EAAOM,gBAAgBsB,QAAQjB,KAAK;QAChCT;YACIM,KAAK;YACLC,QAAQ;YACRC,SAAST,EAAWS;WACrBC,KAAK,SAAUC;YACdC,QAAQC,IAAIF,EAASG,KAAKc;YAC1B,IAAId,IAAOH,EAASG,KAAKc;YACzBZ,QAAQC,QAAQH,GAAM,SAAUI,GAAOC;gBACnC,IAAIU;gBACJA,EAAKC,aACLlB,QAAQC,IAAIK,EAAMa,UAAUhC,EAAOqB;gBACnC,IAAIW,IAAYb,EAAMa,UAAUhC,EAAOqB;gBACvCJ,QAAQC,QAAQc,GAAW,SAAUb,GAAOC;oBACxC,QAAQD,EAAM;sBACV,KAAK;wBACDW,EAAKC,OAAOE;4BAAMX,MAAMtB,EAAOqB;4BAAWa,MAAMf,EAAMe;;wBACtD;;sBACJ,KAAK;wBACDJ,EAAKC,OAAOE;4BAAMX,MAAMtB,EAAOuB;4BAAcW,MAAMf,EAAMe;;;oBAMrEJ,EAAKR,OAAOH,EAAMG;gBAClB,IAAIa,IAAUhB,EAAMiB,MAAMC;gBAC1BnC;oBACIM,KAAK,sBAAsB2B;oBAC3B1B,QAAQ;oBACRC,SAAST,EAAWS;mBACrBC,KAAK,SAAUC;oBACdC,QAAQC,IAAIF,EAASG,KAAKqB,MAAMd,OAChCQ,EAAKQ,YAAY1B,EAASG,KAAKqB,MAAMd,MACrCtB,EAAOK,UAAU4B,KAAKH;mBACvB,SAAUlB;oBACTa,MAAMb,EAASG,KAAKW,MAAMC;oBAE9BzB;oBACIM,KAAI,uBAAqBW,EAAMoB,OAAOF;oBACtC5B,QAAQ;oBACRC,SAAST,EAAWS;mBACrBC,KAAK,SAASC;oBACbC,QAAQC,IAAIF,IACZkB,EAAKU,SAAS5B,EAASG,KAAKwB,OAAOjB;mBACrC,SAASV;oBACPa,MAAMb,EAASG,KAAKW,MAAMC;;;WAGnC,SAAUf;YACTa,MAAMb,EAASG,KAAKW,MAAMC;;QAMlC3B,EAAOyC,aAAY,GACnB5B,QAAQC,IAAId,EAAOyC,YACnBzC,EAAO0C,WAAW,SAAUC;QACxBxC,EAAkBuC,SAASC,GAAQ3C,EAAO4C;OAE9C5C,EAAO6C,YAAY;QACf1C,EAAkB0C,UAAU7C","file":"cloudComputer.min.js","sourcesContent":["/**\n * Created by chenzhongying on 2018/1/5.\n */\nprivate_cloud.controller('cloudComputerController', ['$scope', '$rootScope', '$http', 'all_check_service', '$q', function ($scope, $rootScope, $http, all_check_service,$q) {\n    $scope.cloudHost = [];//云主机列表\n\n    $scope.network_promise = $q.defer();\n    $http({ //获取所有网络类型\n        url: \"/api/list_networks\",\n        method: 'GET',\n        headers: $rootScope.headers\n    }).then(function (response) {\n        console.log(response.data.networks);\n        angular.forEach(response.data.networks, function (value, key) {\n            switch (value[\"provider:network_type\"]) {\n                case 'vxlan':\n                    $scope.fixedName = value.name;\n                    break;\n                case 'flat':\n                    $scope.floatingName = value.name;\n                    break;\n            }\n\n        });\n        console.log($scope.fixedName);\n        console.log($scope.floatingName);\n        $scope.network_promise.resolve();\n    }, function (response) {\n        alert(response.data.error.message);\n    });\n    $scope.network_promise.promise.then(function(){\n        $http({\n            url: \"/api/list_servers/detail\",\n            method: 'GET',\n            headers: $rootScope.headers\n        }).then(function (response) {\n            console.log(response.data.servers);\n            var data = response.data.servers;\n            angular.forEach(data, function (value, key) {\n                var item = {};\n                item.ipData = [];\n                console.log(value.addresses[$scope.fixedName]);\n                var addresses = value.addresses[$scope.fixedName];\n                angular.forEach(addresses, function (value, key) { //获取IP\n                    switch (value[\"OS-EXT-IPS:type\"]) {\n                        case 'fixed':\n                            item.ipData.push({name: $scope.fixedName, addr: value.addr});\n                            break;\n                        case \"floating\":\n                            item.ipData.push({name: $scope.floatingName, addr: value.addr});\n                            break;\n                    }\n\n                });\n\n                item.name = value.name; //云主机名称\n                var imageId = value.image.id; //镜像ID\n                $http({ //获取镜像\n                    url: \"/api/list_images/\" + imageId,\n                    method: 'GET',\n                    headers: $rootScope.headers\n                }).then(function (response) {\n                    console.log(response.data.image.name);\n                    item.imageName = response.data.image.name; //镜像名称\n                    $scope.cloudHost.push(item);\n                }, function (response) {\n                    alert(response.data.error.message);\n                });\n                $http({ //获取配置\n                    url:\"/api/list_flavors/\"+value.flavor.id,\n                    method: 'GET',\n                    headers: $rootScope.headers\n                }).then(function(response){\n                    console.log(response);\n                    item.config = response.data.flavor.name;\n                },function(response){\n                    alert(response.data.error.message);\n                });\n            });\n        }, function (response) {\n            alert(response.data.error.message);\n        });\n    });\n\n\n\n    $scope.all_check = false; //全选按钮状态\n    console.log($scope.all_check);\n    $scope.allCheck = function (status) { //父选项\n        all_check_service.allCheck(status, $scope.hostList);\n    };\n    $scope.itemCheck = function () { //子选项\n        all_check_service.itemCheck($scope);\n\n    };\n}]);"]}