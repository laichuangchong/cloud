{"version":3,"sources":["../js/controller/cloudComputer.js"],"names":["private_cloud","controller","$scope","$sce","$rootScope","$http","all_check_service","$q","$timeout","vm_state","initialized","active","rescued","paused","suspended","stopped","soft_deleted","hard_deleted","resized","error","task_state","null","budilding","image_snapshotting","image_backingup","pausing","unpausing","suspending","resuming","deleting","stopping","starting","rescuing","unrescuing","rebooting","rebuilding","powering_on","powering_off","resizing","resize_confirming","scheduling","block_device_mapping","networking","spawning","power_state","0","1","3","4","6","7","cloudHost","network_promise","defer","url","method","headers","then","response","console","log","data","images","alert","message","flavors","networks","angular","forEach","value","key","fixedName","name","floatingName","resolve","promise","servers","item","ipData","addresses","push","addr","flavorId","flavor","id","config","$","popover","html","content","vcpus","ram","disk","imageId","image","vmState","taskState","powerState","imageName","os-getVNCConsole","type","vnc","restart","cloudId","reboot","all_check","allCheck","status","itemCheck"],"mappings":"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","file":"cloudComputer.min.js","sourcesContent":["/**\n * Created by chenzhongying on 2018/1/5.\n */\nprivate_cloud.controller('cloudComputerController', ['$scope', '$sce', '$rootScope', '$http', 'all_check_service', '$q', '$timeout', function ($scope, $sce, $rootScope, $http, all_check_service, $q, $timeout) {\n    $scope.vm_state = { //状态\n        initialized: '创建',\n        active: '运行',\n        rescued: '灾备运行',\n        paused: '暂停',\n        suspended: '挂起',\n        stopped: '停止',\n        soft_deleted: '软删除',\n        hard_deleted: '应删除',\n        resized: '确认迁移',\n        error: '错误'\n    };\n    $scope.task_state = { //任务\n        null: '没有任务执行',\n        budilding: '孵化',\n        image_snapshotting: '正在创建快找',\n        image_backingup: '备份',\n        pausing: '暂停',\n        unpausing: '暂停恢复',\n        suspending: '正在挂起',\n        resuming: '挂起恢复',\n        deleting: '正在删除',\n        stopping: '正在停止',\n        starting: '正在启动',\n        rescuing: '灾难恢复',\n        unrescuing: '灾难复原',\n        rebooting: '正在重启',\n        rebuilding: '正在重建',\n        powering_on: '打开电源',\n        powering_off: '关闭电源',\n        resizing: '调整配置',\n        resize_confirming: '配置调整确认',\n        scheduling: '调度',\n        block_device_mapping: '块设备映射',\n        networking: '网络映射',\n        spawning: '正在生成'\n    };\n    $scope.power_state = { //电池状态\n        0: '无',\n        1: '运行中',\n        3: '暂停',\n        4: '关闭',\n        6: '崩溃',\n        7: '挂起'\n    };\n    $scope.cloudHost = [];//云主机列表\n    $scope.network_promise = $q.defer();\n    $http({ //获取镜像\n        url: \"/api/list_images\",\n        method: 'GET',\n        headers: $rootScope.headers\n    }).then(function (response) {\n        console.log(response.data.images);\n        $scope.images = response.data.images;//所有镜像列表\n    }, function (response) {\n        alert(response.data.error.message);\n    });\n\n    $http({ //获取所有配置类型\n        url: \"/api/list_flavors/detail\",\n        method: 'GET',\n        headers: $rootScope.headers\n    }).then(function (response) {\n        console.log(response);\n        $scope.flavors = response.data.flavors;//所有配置类型\n\n    }, function (response) {\n        alert(response.data.error.message);\n    });\n\n    $http({ //获取所有网络类型\n        url: \"/api/list_networks\",\n        method: 'GET',\n        headers: $rootScope.headers\n    }).then(function (response) {\n        console.log(response.data.networks);\n        angular.forEach(response.data.networks, function (value, key) {\n            switch (value[\"provider:network_type\"]) {\n                case 'vxlan':\n                    $scope.fixedName = value.name;\n                    break;\n                case 'flat':\n                    $scope.floatingName = value.name;\n                    break;\n            }\n\n        });\n        console.log($scope.fixedName);\n        console.log($scope.floatingName);\n        $scope.network_promise.resolve();\n    }, function (response) {\n        alert(response.data.error.message);\n    });\n\n    $scope.network_promise.promise.then(function () {\n        $http({\n            url: \"/api/list_servers/detail\", //获取云主机列表\n            method: 'GET',\n            headers: $rootScope.headers\n        }).then(function (response) {\n            console.log(response.data.servers);\n            var data = response.data.servers;\n\n            angular.forEach(data, function (value, key) {\n                var item = {};\n                item.ipData = [];\n                console.log(value.addresses[$scope.fixedName]);\n\n                var addresses = value.addresses[$scope.fixedName];\n                angular.forEach(addresses, function (value, key) { //获取IP\n                    switch (value[\"OS-EXT-IPS:type\"]) {\n                        case 'fixed':\n                            item.ipData.push({name: $scope.fixedName, addr: value.addr});\n                            break;\n                        case \"floating\":\n                            item.ipData.push({name: $scope.floatingName, addr: value.addr});\n                            break;\n                    }\n\n                });\n                var flavorId = value.flavor.id; //镜像ID\n\n                angular.forEach($scope.flavors, function (value) {\n                    if (value.id == flavorId) {\n                        console.log(key + \" \" + value.name);\n                        item.config = value.name;\n                        $timeout(function () {\n                            $('#config' + key).popover({\n                                html: true,\n                                content: '<table class=\"table table-bordered table-striped table-condensed\">' +\n                                '<tbody>' +\n                                '<tr>' +\n                                '<td width=\"100px\">VCPUs</td>' +\n                                '<td width=\"100px\">' + value.vcpus +\n                                '</td>' +\n                                '</tr>' +\n                                '<tr>' +\n                                '<td>内存</td>' +\n                                '<td>' + value.ram / 1024 + '</td>' +\n                                '</tr>' +\n                                '<tr>' +\n                                '<td>大小</td>' +\n                                '<td>' + value.disk + '</td>' +\n                                '</tr>' +\n                                '</tbody>' +\n                                '</table>'\n                            });\n                        }, 100);\n\n                    }\n                });\n                item.name = value.name; //云主机名称\n                item.id = value.id; //云主机id\n                var imageId = value.image.id; //镜像ID\n                item.vmState = $scope.vm_state[value['OS-EXT-STS:vm_state']]; //状态\n                item.taskState = $scope.task_state[value['OS-EXT-STS:task_state']]; //任务状态\n                item.powerState = $scope.power_state[value['OS-EXT-STS:power_state']]; //电源状态\n                angular.forEach($scope.images, function (value, key) {\n                    if (imageId == value.id) {\n                        item.imageName = value.name; //镜像名称\n                    }\n                });\n\n                $http({ //获取vnc地址\n                    url: '/api/server_action/' + value.id,\n                    method: 'POST',\n                    headers: $rootScope.headers,\n                    data: {\n                        \"os-getVNCConsole\": {\n                            \"type\": \"novnc\"\n                        }\n                    }\n\n                }).then(function (response) {\n                    console.log(response.data.console.url);\n                    item.vnc = response.data.console.url;\n                }, function (response) {\n                    alert(response.data.error.message);\n                });\n\n                $scope.cloudHost.push(item);\n            });\n        }, function (response) {\n            alert(response.data.error.message);\n        });\n    });\n\n    $scope.restart = function (cloudId) { //重启\n        $http({\n            url: '/api/server_action/' + cloudId,\n            method: 'POST',\n            headers: $rootScope.headers,\n            data: {\n                \"reboot\": {\n                    \"type\": \"HARD\"\n                }\n            }\n        });\n    };\n    $scope.all_check = false; //全选按钮状态\n    console.log($scope.all_check);\n    $scope.allCheck = function (status) { //父选项\n        all_check_service.allCheck(status, $scope.cloudHost);\n    };\n    $scope.itemCheck = function () { //子选项\n        all_check_service.itemCheck($scope, $scope.cloudHost);\n    };\n\n\n}]);\n\n"]}