{"version":3,"sources":["../js/controller/cloudComputer.js"],"names":["private_cloud","controller","$scope","$sce","$rootScope","$http","all_check_service","$q","$timeout","$window","$interval","$location","url","path","vm_state","initialized","active","rescued","paused","suspended","stopped","soft_deleted","hard_deleted","resized","error","task_state","null","building","image_snapshotting","image_backingup","pausing","unpausing","suspending","resuming","deleting","stopping","starting","rescuing","unrescuing","rebuilding","powering_on","powering_off","resizing","resize_confirming","scheduling","block_device_mapping","networking","spawning","reboot_started_hard","rebuild_spawning","powering-off","power_state","0","1","3","4","6","7","cloudHost","network_promise","promise","then","method","headers","response","data","servers","console","log","angular","forEach","value","key","item","ipData","addresses","push","flavors","flavor","id","config","name","imageId","image","vmState","taskState","powerState","diskConfig","images","imageName","os-getVNCConsole","type","vnc","$on","ngRepeatFinishedEvent","$","popover","html","content","vcpus","ram","disk","deleteCloud","cloudId","confirm","status","alert","location","reload","restart","reboot","all_check","allCheck","itemCheck","resetConfigInfo","newConfig","oldConfig","limits","absolute","countData","count","instances","title","used","totalInstancesUsed","total","maxTotalInstances","unit","cores","totalCoresUsed","maxTotalCores","totalRAMUsed","maxTotalRAMSize","changeConfig","coresChangeProgress","ramChangeProgress","submitConfig","resize","flavorRef","OS-DCF:diskConfig","modal","reconstruction","submitResetCloudComputer","selectImage","rebuild","imageRef","searchCloud","showCloud","cloud_name","indexOf","globalToggle","json","check_status","isDefined","interval","cancel"],"mappings":"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","file":"cloudComputer.min.js","sourcesContent":["/**\n * Created by chenzhongying on 2018/1/5.\n */\nprivate_cloud.controller('cloudComputerController', ['$scope', '$sce', '$rootScope', '$http', 'all_check_service', '$q', '$timeout', '$window', '$interval', '$location', function ($scope, $sce, $rootScope, $http, all_check_service, $q, $timeout, $window, $interval, $location) {\n    $scope.url = $location.path();\n    \n    $scope.vm_state = { //云主机状态\n        initialized: '创建',\n        active: '运行',\n        rescued: '灾备运行',\n        paused: '暂停',\n        suspended: '挂起',\n        stopped: '停止',\n        soft_deleted: '软删除',\n        hard_deleted: '应删除',\n        resized: '确认迁移',\n        error: '错误'\n    };\n    $scope.task_state = { //任务\n        null: '没有任务执行',\n        building: '孵化',\n        image_snapshotting: '正在创建快找',\n        image_backingup: '备份',\n        pausing: '暂停',\n        unpausing: '暂停恢复',\n        suspending: '正在挂起',\n        resuming: '挂起恢复',\n        deleting: '正在删除',\n        stopping: '正在停止',\n        starting: '正在启动',\n        rescuing: '灾难恢复',\n        unrescuing: '灾难复原',\n        rebuilding: '正在重建',\n        powering_on: '打开电源',\n        powering_off: '关闭电源',\n        resizing: '调整配置',\n        resize_confirming: '配置调整确认',\n        scheduling: '调度',\n        block_device_mapping: '块设备映射',\n        networking: '网络映射',\n        spawning: '正在生成',\n        reboot_started_hard: '正在重启',\n        rebuild_spawning: '重建完成',\n        \"powering-off\": '正在关闭电源'\n    };\n    $scope.power_state = { //电池状态\n        0: '无',\n        1: '运行中',\n        3: '暂停',\n        4: '关闭',\n        6: '崩溃',\n        7: '挂起'\n    };\n    $scope.cloudHost = [];//云主机列表\n\n\n    $rootScope.network_promise.promise.then(function () {\n        $http({\n            url: \"/api/list_servers/detail\", //获取云主机列表\n            method: 'GET',\n            headers: $rootScope.headers\n        }).then(function (response) {\n            var data = response.data.servers;\n            console.log(data);\n            angular.forEach(data, function (value, key) {\n                var item = {};\n                item.ipData = [];\n                console.log(value.addresses);\n                angular.forEach(value.addresses, function (value, key) { //获取IP\n                    angular.forEach(value, function (value, key) {\n                        console.log(value);\n                        item.ipData.push(value);\n                    });\n                });\n                // item.flavorId = value.flavor.id; //配置ID\n                angular.forEach($rootScope.flavors, function (flavor) {\n                    if (flavor.id == value.flavor.id) {\n                        item.config = flavor; //配置\n                    }\n                });\n                item.name = value.name; //云主机名称\n                item.id = value.id; //云主机id\n                var imageId = value.image.id; //镜像ID\n                item.vmState = $scope.vm_state[value['OS-EXT-STS:vm_state']]; //状态\n                item.taskState = $scope.task_state[value['OS-EXT-STS:task_state']]; //任务状态\n                item.powerState = $scope.power_state[value['OS-EXT-STS:power_state']]; //电源状态\n                item.diskConfig = value['OS-DCF:diskConfig']; //磁盘分区\n                console.log(item);\n                angular.forEach($rootScope.images, function (value, key) {\n                    if (imageId == value.id) {\n                        item.imageName = value.name; //镜像名称\n                    }\n                });\n\n                $http({ //获取vnc地址\n                    url: '/api/server_action/' + value.id,\n                    method: 'POST',\n                    headers: $rootScope.headers,\n                    data: {\n                        \"os-getVNCConsole\": {\n                            \"type\": \"novnc\"\n                        }\n                    }\n\n                }).then(function (response) {\n                    item.vnc = response.data.console.url;\n                }, function (response) {\n                    // alert(response.data.error.message);\n                });\n\n                $scope.cloudHost.push(item);\n                $scope.$on('ngRepeatFinished', function (ngRepeatFinishedEvent) {\n                    //you also get the actual event object\n                    //do stuff, execute functions -- whatever...\n                    $('#config' + key).popover({\n                        html: true,\n                        content: '<table class=\"table table-bordered table-striped table-condensed\">' +\n                        '<tbody>' +\n                        '<tr>' +\n                        '<td width=\"100px\">VCPUs</td>' +\n                        '<td width=\"100px\">' + item.config.vcpus +\n                        '</td>' +\n                        '</tr>' +\n                        '<tr>' +\n                        '<td>内存</td>' +\n                        '<td>' + item.config.ram / 1024 + '</td>' +\n                        '</tr>' +\n                        '<tr>' +\n                        '<td>大小</td>' +\n                        '<td>' + item.config.disk + '</td>' +\n                        '</tr>' +\n                        '</tbody>' +\n                        '</table>'\n                    });\n                });\n            });\n        }, function (response) {\n            // alert(response.data.error.message);\n        });\n    });\n\n    $scope.deleteCloud = function (cloudId, name) { //删除云主机\n        if (confirm('您确定删除' + name + '吗？此操作不可恢复！')) {\n            $http({\n                url: '/api/list_servers/' + cloudId,\n                method: 'DELETE',\n                headers: $rootScope.headers\n            }).then(function (response) {\n                if (response.status == 204) {\n                    alert('操作成功');\n                    $window.location.reload();\n                }\n            }, function () {\n                alert('操作失败请重试');\n            });\n        }\n\n    };\n    $scope.restart = function (cloudId) { //重启\n        $http({\n            url: '/api/server_action/' + cloudId,\n            method: 'POST',\n            headers: $rootScope.headers,\n            data: {\n                \"reboot\": {\n                    \"type\": \"HARD\"\n                }\n            }\n        }).then(function (response) {\n            if (response.status == 202) {\n                $window.location.reload();\n            }\n        }, function (response) {\n            // alert(response.data.error.message);\n        });\n    };\n    $scope.all_check = false; //全选按钮状态\n    console.log($scope.all_check);\n    $scope.allCheck = function (status) { //父选项\n        all_check_service.allCheck(status, $scope.cloudHost);\n    };\n    $scope.itemCheck = function () { //子选项\n        all_check_service.itemCheck($scope, $scope.cloudHost);\n    };\n    $scope.resetConfigInfo = function (config, diskConfig, cloudId) { //调整配置弹框\n        $scope.newConfig = config;//初始化新云主机类型\n        $scope.diskConfig = diskConfig;//当前操作磁盘分区\n        $scope.cloudId = cloudId;//当前操作云主机Id\n        $scope.oldConfig = config; //旧配置类型\n        console.log($scope.newConfig);\n        $http({   //计算和防火墙\n            url: '/api/nova_limits',\n            method: 'GET',\n            headers: $rootScope.headers\n        }).then(function (response) {\n            console.log(response.data.limits.absolute);\n            var countData = response.data.limits.absolute;\n            $scope.count = {\n                instances: {\n                    title: '云主机',\n                    used: countData.totalInstancesUsed,\n                    total: countData.maxTotalInstances,\n                    unit: '个'\n\n                },\n                cores: {\n                    title: 'VCPUs',\n                    used: countData.totalCoresUsed,\n                    total: countData.maxTotalCores,\n                    unit: '个'\n                },\n                ram: {\n                    title: '内存',\n                    used: countData.totalRAMUsed / 1024,\n                    total: countData.maxTotalRAMSize / 1024,\n                    unit: 'GB'\n                }\n            };\n\n        }, function (response) {\n            console.log(response);\n            // alert(response.data.error.message);\n        });\n\n    };\n    $scope.changeConfig = function (newConfig) { //进度条\n        $scope.coresChangeProgress = newConfig.vcpus - $scope.oldConfig.vcpus;\n        $scope.ramChangeProgress = newConfig.ram / 1024 - $scope.oldConfig.ram / 1024;\n    };\n\n    $scope.submitConfig = function () { //修改配置提交\n        console.log($scope.cloudId);\n        console.log($scope.newConfig);\n        console.log($scope.diskConfig);\n        $http({\n            url: '/api/server_action/' + $scope.cloudId,\n            method: 'POST',\n            headers: $rootScope.headers,\n            data: {\n                \"resize\": {\n                    \"flavorRef\": $scope.newConfig.id,\n                    \"OS-DCF:diskConfig\": $scope.diskConfig\n                }\n            }\n\n        }).then(function (response) {\n            console.log(response);\n            if (response.status == 202) {\n                $('#myModal').modal('hide');\n            }\n        }, function (response) {\n            console.log(response);\n        });\n    };\n\n    $scope.reconstruction = function (cloudId) { //重建云主机获取当前操作云主机ID\n        $scope.cloudId = cloudId;//当前操作云主机Id\n    };\n\n    $scope.submitResetCloudComputer = function () { //重建云主机\n        console.log($scope.selectImage);\n        $http({\n            url: '/api/server_action/' + $scope.cloudId,\n            method: 'POST',\n            headers: $rootScope.headers,\n            data: {\n                \"rebuild\": {\n                    \"imageRef\": $scope.selectImage\n                }\n            }\n        }).then(function (response) {\n            console.log(response);\n            if (response.status == 202) {\n                $window.location.reload();\n            }\n        }, function () {\n\n        });\n    };\n    $scope.searchCloud = '';\n    $scope.showCloud = function (cloud_name) {\n        if ($scope.searchCloud) {\n            if (cloud_name.indexOf($scope.searchCloud) != -1) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    };\n\n    $scope.globalToggle = function (status) {\n        var keystr = \"os-\" + status;\n        var json = {};\n        json[keystr] = null;\n        angular.forEach($scope.cloudHost, function (value, key) {\n            if (value.check_status) {\n                console.log(value.id);\n                $http({\n                    url: '/api/server_action/' + value.id,\n                    method: 'POST',\n                    headers: $rootScope.headers,\n                    data: json\n                }).then(function () {\n\n                }, function () {\n\n                });\n            }\n        });\n        if (angular.isDefined($rootScope.interval)) {\n            $interval.cancel($rootScope.interval);\n            $rootScope.interval = null;\n        }\n\n        $rootScope.interval = $interval(function () {\n            if ($scope.url == '/count/computer') {\n                $http({\n                    url: \"/api/list_servers/detail\", //获取云主机列表\n                    method: 'GET',\n                    headers: $rootScope.headers\n                }).then(function (response) {\n                    var data = response.data.servers;\n                    angular.forEach(data, function (value, key) {\n                        console.log($scope.cloudHost[key]);\n\n                        $scope.cloudHost[key].vmState = $scope.vm_state[value['OS-EXT-STS:vm_state']]; //状态\n                        $scope.cloudHost[key].taskState = $scope.task_state[value['OS-EXT-STS:task_state']]; //任务状态\n                        $scope.cloudHost[key].powerState = $scope.power_state[value['OS-EXT-STS:power_state']]; //电源状态\n                    });\n                }, function () {\n\n                });\n            }\n            $scope.url = $location.path();\n        }, 5000);\n\n\n    };\n}]);\n"]}