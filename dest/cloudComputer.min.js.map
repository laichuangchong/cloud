{"version":3,"sources":["../js/controller/cloudComputer.js"],"names":["private_cloud","controller","$scope","$sce","$rootScope","$http","all_check_service","$q","$timeout","$window","$interval","$location","resetState","obj","data","vm","state","text","vm_state","task","task_state","power","power_state","url","path","warn","warnText","initialized","active","rescued","paused","suspended","stopped","soft_deleted","hard_deleted","resized","error","null","building","image_snapshotting","image_backingup","pausing","unpausing","suspending","resuming","deleting","stopping","starting","rescuing","unrescuing","rebuilding","powering_on","powering_off","resizing","resize_confirming","scheduling","block_device_mapping","networking","spawning","reboot_started_hard","rebuild_spawning","powering-off","0","1","3","4","6","7","cloudHost","network_promise","promise","then","method","headers","response","servers","console","log","angular","forEach","value","key","item","ipData","addresses","push","flavors","flavor","id","config","name","imageId","image","diskConfig","images","imageName","os-getVNCConsole","type","vnc","success","server","cancel","$on","ngRepeatFinishedEvent","$","popover","html","content","vcpus","ram","disk","deleteCloud","cloudId","index","confirm","status","alert","splice","restartComputer","reboot","statusText","all_check","allCheck","itemCheck","resetConfigInfo","newConfig","oldConfig","limits","absolute","countData","count","instances","title","used","totalInstancesUsed","total","maxTotalInstances","unit","cores","totalCoresUsed","maxTotalCores","totalRAMUsed","maxTotalRAMSize","changeConfig","coresChangeProgress","ramChangeProgress","submitConfig","resize","flavorRef","OS-DCF:diskConfig","modal","reconstruction","submitResetCloudComputer","selectImage","rebuild","imageRef","location","reload","searchCloud","showCloud","cloud_name","indexOf","globalToggle","json","check_status","vmState","taskState","powerState","toggleComputer"],"mappings":"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","file":"cloudComputer.min.js","sourcesContent":["/**\n * Created by chenzhongying on 2018/1/5.\n */\nprivate_cloud.controller('cloudComputerController', ['$scope', '$sce', '$rootScope', '$http', 'all_check_service', '$q', '$timeout', '$window', '$interval', '$location', function ($scope, $sce, $rootScope, $http, all_check_service, $q, $timeout, $window, $interval, $location) {\n    $scope.url = $location.path();\n    $scope.warn = false;//警告框\n    $scope.warnText = [];//警告文字\n    $scope.vm_state = { //云主机状态\n        initialized: '创建',\n        active: '运行',\n        rescued: '灾备运行',\n        paused: '暂停',\n        suspended: '挂起',\n        stopped: '停止',\n        soft_deleted: '软删除',\n        hard_deleted: '应删除',\n        resized: '确认迁移',\n        error: '错误'\n    };\n    $scope.task_state = { //任务\n        null: '没有任务执行',\n        building: '孵化',\n        image_snapshotting: '正在创建快找',\n        image_backingup: '备份',\n        pausing: '暂停',\n        unpausing: '暂停恢复',\n        suspending: '正在挂起',\n        resuming: '挂起恢复',\n        deleting: '正在删除',\n        stopping: '正在停止',\n        starting: '正在启动',\n        rescuing: '灾难恢复',\n        unrescuing: '灾难复原',\n        rebuilding: '正在重建',\n        powering_on: '打开电源',\n        powering_off: '关闭电源',\n        resizing: '调整配置',\n        resize_confirming: '配置调整确认',\n        scheduling: '调度',\n        block_device_mapping: '块设备映射',\n        networking: '网络映射',\n        spawning: '正在生成',\n        reboot_started_hard: '正在重启',\n        rebuild_spawning: '重建完成',\n        \"powering-off\": '正在关闭电源'\n    };\n    $scope.power_state = { //电池状态\n        0: '无',\n        1: '运行中',\n        3: '暂停',\n        4: '关闭',\n        6: '崩溃',\n        7: '挂起'\n    };\n    $scope.cloudHost = [];//云主机列表\n\n    function resetState(obj,data){ //开关机或新建时重置任务状态\n        obj.vm = { //云主机状态\n            state:data['OS-EXT-STS:vm_state'],\n            text:$scope.vm_state[data['OS-EXT-STS:vm_state']]\n        };\n        obj.task = { //任务状态\n            state:data['OS-EXT-STS:task_state'],\n            text:$scope.task_state[data['OS-EXT-STS:task_state']]\n        };\n        obj.power = { //电源状态\n            state:data['OS-EXT-STS:power_state'],\n            text:$scope.power_state[data['OS-EXT-STS:power_state']]\n        };\n    }\n\n    $rootScope.network_promise.promise.then(function () {\n        $http({\n            url: \"/api/list_servers/detail\", //获取云主机列表\n            method: 'GET',\n            headers: $rootScope.headers\n        }).then(function (response) {\n            var data = response.data.servers;\n            console.log(data);\n            angular.forEach(data, function (value, key) {\n                var item = {};\n                item.ipData = [];\n                console.log(value.addresses);\n                angular.forEach(value.addresses, function (value, key) { //获取IP\n                    angular.forEach(value, function (value, key) {\n                        console.log(value);\n                        item.ipData.push(value);\n                    });\n                });\n                // item.flavorId = value.flavor.id; //配置ID\n                angular.forEach($rootScope.flavors, function (flavor) {\n                    if (flavor.id == value.flavor.id) {\n                        item.config = flavor; //配置\n                    }\n                });\n                item.name = value.name; //云主机名称\n                item.id = value.id; //云主机id\n                var imageId = value.image.id; //镜像ID\n                resetState(item,value);\n                item.diskConfig = value['OS-DCF:diskConfig']; //磁盘分区\n                console.log(item);\n                angular.forEach($rootScope.images, function (value, key) {\n                    if (imageId == value.id) {\n                        item.imageName = value.name; //镜像名称\n                    }\n                });\n                $http({ //获取vnc地址\n                    url: '/api/server_action/' + value.id,\n                    method: 'POST',\n                    headers: $rootScope.headers,\n                    data: {\n                        \"os-getVNCConsole\": {\n                            \"type\": \"novnc\"\n                        }\n                    }\n\n                }).then(function (response) {\n                    item.vnc = response.data.console.url;\n                }, function (response) {\n                    // alert(response.data.error.message);\n                });\n\n                $scope.cloudHost.push(item);\n                if (value['OS-EXT-STS:task_state'] != null) { //如果有任务正在执行那就要监听这个任务状态\n                    $scope['intervalInit' + key] = $interval(function () {\n                        $http({\n                            url: '/api/list_servers/' + item.id,\n                            method: 'GET',\n                            headers: $rootScope.headers\n                        }).then(function (success) {\n                            console.log(success);\n                            var data = success.data.server;\n                            resetState($scope.cloudHost[key],data);\n\n                            if (data['OS-EXT-STS:task_state'] == null) {\n                                $scope.cloudHost[key].ipData=[]; //IP地址初始化\n                                $scope.cloudHost[key].vnc = ''; //vnc地址初始化\n\n                                console.log(data.addresses);\n                                angular.forEach(data.addresses, function (value) { //获取IP\n                                    angular.forEach(value, function (value) {\n                                        $scope.cloudHost[key].ipData.push(value);\n                                        console.log($scope.cloudHost[key].ipData);\n                                    });\n                                });\n                                console.log($scope.cloudHost[key].ipData);\n                                $interval.cancel($scope['intervalInit' + key]);\n                                $scope['intervalInit' + key] = null;\n                                $http({ //获取vnc地址\n                                    url: '/api/server_action/' + value.id,\n                                    method: 'POST',\n                                    headers: $rootScope.headers,\n                                    data: {\n                                        \"os-getVNCConsole\": {\n                                            \"type\": \"novnc\"\n                                        }\n                                    }\n\n                                }).then(function (response) {\n                                    $scope.cloudHost[key].vnc = response.data.console.url;\n                                }, function (response) {\n                                    // alert(response.data.error.message);\n                                });\n                            }\n                        }, function (error) {\n\n                        });\n                    }, 2000);\n                }\n                $scope.$on('ngRepeatFinished', function (ngRepeatFinishedEvent) {\n                    //you also get the actual event object\n                    //do stuff, execute functions -- whatever...\n                    $('#config' + key).popover({\n                        html: true,\n                        content: '<table class=\"table table-bordered table-striped table-condensed\">' +\n                        '<tbody>' +\n                        '<tr>' +\n                        '<td width=\"100px\">VCPUs</td>' +\n                        '<td width=\"100px\">' + item.config.vcpus +\n                        '</td>' +\n                        '</tr>' +\n                        '<tr>' +\n                        '<td>内存</td>' +\n                        '<td>' + item.config.ram / 1024 + '</td>' +\n                        '</tr>' +\n                        '<tr>' +\n                        '<td>大小</td>' +\n                        '<td>' + item.config.disk + '</td>' +\n                        '</tr>' +\n                        '</tbody>' +\n                        '</table>'\n                    });\n                });\n            });\n        }, function (response) {\n            // alert(response.data.error.message);\n        });\n    });\n\n    $scope.deleteCloud = function (cloudId, name,index) { //删除云主机\n        if (confirm('您确定删除' + name + '吗？此操作不可恢复！')) {\n            $http({\n                url: '/api/list_servers/' + cloudId,\n                method: 'DELETE',\n                headers: $rootScope.headers\n            }).then(function (response) {\n                if (response.status == 204) {\n                    alert('操作成功');\n                    $scope.cloudHost.splice(index,1);\n                    // $window.location.reload();\n                }\n            }, function () {\n                alert('操作失败请重试');\n            });\n        }\n\n    };\n    $scope.restartComputer = function (cloudId,key) { //重启\n        $http({\n            url: '/api/server_action/' + cloudId,\n            method: 'POST',\n            headers: $rootScope.headers,\n            data: {\n                \"reboot\": {\n                    \"type\": \"HARD\"\n                }\n            }\n        }).then(function (response) {\n            console.log(response);\n            if (response.status == 202) {\n                $scope['restartComputer'+key]= $interval(function(){\n                    $http({\n                        url: '/api/list_servers/' + cloudId,\n                        method: 'GET',\n                        headers: $rootScope.headers\n                    }).then(function (success) {\n                        console.log(success);\n                        var data = success.data.server;\n                        resetState($scope.cloudHost[key],data);\n                        if (data['OS-EXT-STS:task_state'] == null) {\n                            $interval.cancel($scope['restartComputer'+key]);\n                            $scope['restartComputer'+key] = null;\n                        }\n                    }, function (error) {\n\n                    });\n                },2000);\n            }\n        }, function (response) {\n            alert(response.statusText);\n        });\n    };\n    $scope.all_check = false; //全选按钮状态\n    console.log($scope.all_check);\n    $scope.allCheck = function (status) { //父选项\n        all_check_service.allCheck(status, $scope.cloudHost);\n    };\n    $scope.itemCheck = function () { //子选项\n        all_check_service.itemCheck($scope, $scope.cloudHost);\n    };\n    $scope.resetConfigInfo = function (config, diskConfig, cloudId) { //调整配置弹框\n        $scope.newConfig = config;//初始化新云主机类型\n        $scope.diskConfig = diskConfig;//当前操作磁盘分区\n        $scope.cloudId = cloudId;//当前操作云主机Id\n        $scope.oldConfig = config; //旧配置类型\n        console.log($scope.newConfig);\n        $http({   //计算和防火墙\n            url: '/api/nova_limits',\n            method: 'GET',\n            headers: $rootScope.headers\n        }).then(function (response) {\n            console.log(response.data.limits.absolute);\n            var countData = response.data.limits.absolute;\n            $scope.count = {\n                instances: {\n                    title: '云主机',\n                    used: countData.totalInstancesUsed,\n                    total: countData.maxTotalInstances,\n                    unit: '个'\n\n                },\n                cores: {\n                    title: 'VCPUs',\n                    used: countData.totalCoresUsed,\n                    total: countData.maxTotalCores,\n                    unit: '个'\n                },\n                ram: {\n                    title: '内存',\n                    used: countData.totalRAMUsed / 1024,\n                    total: countData.maxTotalRAMSize / 1024,\n                    unit: 'GB'\n                }\n            };\n\n        }, function (response) {\n            console.log(response);\n            alert(response.statusText);\n        });\n\n    };\n    $scope.changeConfig = function (newConfig) { //进度条\n        $scope.coresChangeProgress = newConfig.vcpus - $scope.oldConfig.vcpus;\n        $scope.ramChangeProgress = newConfig.ram / 1024 - $scope.oldConfig.ram / 1024;\n    };\n\n    $scope.submitConfig = function () { //修改配置提交\n        console.log($scope.cloudId);\n        console.log($scope.newConfig);\n        console.log($scope.diskConfig);\n        $http({\n            url: '/api/server_action/' + $scope.cloudId,\n            method: 'POST',\n            headers: $rootScope.headers,\n            data: {\n                \"resize\": {\n                    \"flavorRef\": $scope.newConfig.id,\n                    \"OS-DCF:diskConfig\": $scope.diskConfig\n                }\n            }\n\n        }).then(function (response) {\n            console.log(response);\n            if (response.status == 202) {\n                $('#reset_config').modal('hide');\n            }\n        }, function (response) {\n            console.log(response);\n            alert(response.statusText);\n        });\n    };\n\n    $scope.reconstruction = function (cloudId) { //重建云主机获取当前操作云主机ID\n        $scope.cloudId = cloudId;//当前操作云主机Id\n    };\n\n    $scope.submitResetCloudComputer = function () { //重建云主机\n        console.log($scope.selectImage);\n        $http({\n            url: '/api/server_action/' + $scope.cloudId,\n            method: 'POST',\n            headers: $rootScope.headers,\n            data: {\n                \"rebuild\": {\n                    \"imageRef\": $scope.selectImage\n                }\n            }\n        }).then(function (response) {\n            console.log(response);\n            if (response.status == 202) {\n                // $('#reset_cloud_computer').modal('hide');\n                $window.location.reload();\n            }\n        }, function (response) {\n            alert(response.statusText);\n        });\n    };\n    $scope.searchCloud = '';\n    $scope.showCloud = function (cloud_name) {\n        if ($scope.searchCloud) {\n            if (cloud_name.indexOf($scope.searchCloud) != -1) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    };\n\n    $scope.globalToggle = function (status) {\n        var keystr = \"os-\" + status;\n        var json = {};\n        json[keystr] = null;\n        angular.forEach($scope.cloudHost, function (value, key) {\n            if (value.check_status) {\n                console.log(value.id);\n                $http({\n                    url: '/api/server_action/' + value.id,\n                    method: 'POST',\n                    headers: $rootScope.headers,\n                    data: json\n                }).then(function (success) {\n                    console.log(success);\n                 $scope['intervalToggle'+key]= $interval(function(){\n                     $http({\n                         url: '/api/list_servers/' + value.id,\n                         method: 'GET',\n                         headers: $rootScope.headers\n                     }).then(function (success) {\n                         console.log(success);\n                         var data = success.data.server;\n                         $scope.cloudHost[key].vmState = $scope.vm_state[data['OS-EXT-STS:vm_state']]; //状态\n                         $scope.cloudHost[key].taskState = $scope.task_state[data['OS-EXT-STS:task_state']]; //任务状态\n                         $scope.cloudHost[key].powerState = $scope.power_state[data['OS-EXT-STS:power_state']]; //电源状态\n                         if (data['OS-EXT-STS:task_state'] == null) {\n                             $interval.cancel($scope['intervalToggle'+key]);\n                             $scope['intervalToggle'+key] = null;\n                         }\n                     }, function (error) {\n\n                     });\n                    },2000);\n                }, function (error) {\n                    console.log(error);\n                    $scope.warn = true;\n                    $scope.warnText.push('错误' + error.status + ' 云主机：' + value.name + '操作失败');\n                });\n            }\n        });\n        /*if (angular.isDefined($rootScope.interval)) {\n         $interval.cancel($rootScope.interval);\n         $rootScope.interval = null;\n         }\n\n         $rootScope.interval = $interval(function () {\n         if ($scope.url == '/count/computer') {\n         $http({\n         url: \"/api/list_servers/detail\", //获取云主机列表\n         method: 'GET',\n         headers: $rootScope.headers\n         }).then(function (response) {\n         var data = response.data.servers;\n         angular.forEach(data, function (value, key) {\n         console.log($scope.cloudHost[key]);\n\n         $scope.cloudHost[key].vmState = $scope.vm_state[value['OS-EXT-STS:vm_state']]; //状态\n         $scope.cloudHost[key].taskState = $scope.task_state[value['OS-EXT-STS:task_state']]; //任务状态\n         $scope.cloudHost[key].powerState = $scope.power_state[value['OS-EXT-STS:power_state']]; //电源状态\n         });\n         }, function () {\n\n         });\n         }\n         $scope.url = $location.path();\n         }, 2000);*/\n\n\n    };\n    $scope.toggleComputer = function (status,cloudId,key) {\n        var keystr = \"os-\" + status;\n        var json = {};\n        json[keystr] = null;\n        $http({\n            url: '/api/server_action/' + cloudId,\n            method: 'POST',\n            headers: $rootScope.headers,\n            data: json\n        }).then(function (success) {\n            console.log(success);\n            $scope['intervalToggle'+key]= $interval(function(){\n                $http({\n                    url: '/api/list_servers/' + cloudId,\n                    method: 'GET',\n                    headers: $rootScope.headers\n                }).then(function (success) {\n                    console.log(success);\n                    var data = success.data.server;\n                    resetState($scope.cloudHost[key],data);\n                    /*$scope.cloudHost[key].vm = { //云主机状态\n                        state:data['OS-EXT-STS:vm_state'],\n                        text:$scope.vm_state[data['OS-EXT-STS:vm_state']]\n                    };\n                    $scope.cloudHost[key].task = { //任务状态\n                        state:data['OS-EXT-STS:task_state'],\n                        text:$scope.task_state[data['OS-EXT-STS:task_state']]\n                    };\n                    $scope.cloudHost[key].power = { //电源状态\n                        state:data['OS-EXT-STS:power_state'],\n                        text:$scope.power_state[data['OS-EXT-STS:power_state']]\n                    };*/\n\n                    if (data['OS-EXT-STS:task_state'] == null) {\n                        $interval.cancel($scope['intervalToggle'+key]);\n                        $scope['intervalToggle'+key] = null;\n                    }\n                }, function (error) {\n\n                });\n            },2000);\n        }, function (error) {\n            console.log(error);\n            $scope.warn = true;\n            $scope.warnText.push('错误' + error.status + ' 云主机：' + value.name + '操作失败');\n        });\n\n    };\n\n\n}]);\n"]}