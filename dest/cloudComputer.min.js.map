{"version":3,"sources":["../js/controller/cloudComputer.js"],"names":["private_cloud","controller","$scope","$state","$sce","$rootScope","$http","all_check_service","$q","$timeout","$window","$interval","$location","count_service","images_service","resetState","obj","data","vm","state","text","vm_state","task","task_state","power","power_state","reachImage","imageId","angular","forEach","images","value","key","id","imageName","name","reachFlover","i","flavors","length","flavor","url","path","getCount","count_promise","promise","then","console","log","count","searchCloud","warn","warnText","building","active","rescued","paused","suspended","stopped","soft_deleted","hard_deleted","resized","error","null","image_snapshotting","image_backingup","pausing","unpausing","suspending","resuming","deleting","stopping","starting","rescuing","unrescuing","rebuilding","powering_on","powering_off","resizing","resize_confirming","scheduling","block_device_mapping","networking","spawning","reboot_started_hard","rebuild_spawning","powering-off","resize_finish","resize_reverting","resize_migrated","resize_migrating","image_uploading","image_pending_upload","0","1","3","4","6","7","cloudHost","getImages","images_promise","response","method","headers","servers","item","ipData","addresses","push","image","os-getVNCConsole","type","vnc","alert","statusText","success","server","cancel","$on","ngRepeatFinishedEvent","$","popover","html","content","vcpus","ram","disk","deleteCloud","cloudId","index","confirm","status","splice","restartComputer","reboot","all_check","allCheck","itemCheck","changeConfig","newConfig","coresChangeProgress","oldConfig","ramChangeProgress","showConfig","resetConfigInfo","info","canSelectFlavors","copy","flavorId","reachFloverIndex","submitConfig","diskConfig","resize","flavorRef","OS-DCF:diskConfig","modal","intervalConfig","confirmConfig","confirmResize","intervalConfirmConfig","go","reload","returnConfig","revertResize","reconstruction","selectImage","submitResetCloudComputer","rebuild","imageRef","intervalReconstruction","showCloud","cloud_name","indexOf","toggleComputer","json"],"mappings":"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","file":"cloudComputer.min.js","sourcesContent":["/**\n * Created by chenzhongying on 2018/1/5.\n */\nprivate_cloud.controller('cloudComputerController', ['$scope', '$state', '$sce', '$rootScope', '$http', 'all_check_service', '$q', '$timeout', '$window', '$interval', '$location', 'count_service','images_service', function ($scope, $state, $sce, $rootScope, $http, all_check_service, $q, $timeout, $window, $interval, $location, count_service,images_service) {\n    $scope.url = $location.path();\n    count_service.getCount();//主要获取云主机、vcpus等相关信息\n    $rootScope.count_promise.promise.then(function(data){\n        console.log(data);\n        $scope.count = data.count;\n    });\n    $scope.searchCloud = ''; //搜索内容\n    $scope.warn = false;//警告框\n    $scope.warnText = [];//警告文字\n    $scope.vm_state = { //云主机状态\n        building: '创建中',\n        active: '运行中',\n        rescued: '灾备运行',\n        paused: '暂停',\n        suspended: '挂起',\n        stopped: '停止',\n        soft_deleted: '软删除',\n        hard_deleted: '应删除',\n        resized: '确认/回退(调整配置)? ',\n        error: '错误'\n    };\n    $scope.task_state = { //任务\n        null: '无',\n        building: '孵化',\n        image_snapshotting: '正在创建快照',\n        image_backingup: '备份',\n        pausing: '暂停',\n        unpausing: '暂停恢复',\n        suspending: '正在挂起',\n        resuming: '挂起恢复',\n        deleting: '正在删除',\n        stopping: '正在停止',\n        starting: '正在启动',\n        rescuing: '灾难恢复',\n        unrescuing: '灾难复原',\n        rebuilding: '正在重建',\n        powering_on: '打开电源',\n        powering_off: '关闭电源',\n        resizing: '调整配置',\n        resize_confirming: '配置调整确认',\n        scheduling: '调度',\n        block_device_mapping: '块设备映射',\n        networking: '网络映射',\n        spawning: '正在生成',\n        reboot_started_hard: '正在重启',\n        rebuild_spawning: '重建孵化中',\n        \"powering-off\": '正在关闭电源',\n        resize_finish: '已经重建',\n        resize_reverting: '调整撤销中',\n        \"resize_migrated\": '调整配置完毕',\n        \"resize_migrating\": '正在调整配置',\n        \"image_uploading\":'镜像上传中',\n        \"image_pending_upload\":'等待上传镜像'\n    };\n    $scope.power_state = { //电池状态\n        0: '无',\n        1: '运行中',\n        3: '暂停',\n        4: '关闭',\n        6: '崩溃',\n        7: '挂起'\n    };\n    $scope.cloudHost = [];//云主机列表\n    function resetState(obj, data) { //更新数据\n        obj.vm = { //云主机状态\n            state: data['OS-EXT-STS:vm_state'],\n            text: $scope.vm_state[data['OS-EXT-STS:vm_state']]\n        };\n        obj.task = { //任务状态\n            state: data['OS-EXT-STS:task_state'],\n            text: $scope.task_state[data['OS-EXT-STS:task_state']]\n        };\n        obj.power = { //电源状态\n            state: data['OS-EXT-STS:power_state'],\n            text: $scope.power_state[data['OS-EXT-STS:power_state']]\n        };\n    }\n\n    function reachImage(obj, imageId) { //查找镜像名称\n        angular.forEach($scope.images, function (value, key) {\n            if (imageId == value.id) {\n                obj.imageName = value.name; //镜像名称\n            }\n        });\n    }\n\n    function reachFlover(obj) {  //查找配置\n        for (var i = 0; i < $rootScope.flavors.length; i++) {\n            if ($rootScope.flavors[i].id == obj.flavor.id) {\n                return $rootScope.flavors[i]; //配置\n            }\n        }\n    }\n\n    function reachFloverIndex(flavorId) {  //查找配置类型在数据中的位置\n        for (var i = 0; i < $rootScope.flavors.length; i++) {\n            if ($rootScope.flavors[i].id == flavorId) {\n                return i; //返回坐标\n            }\n        }\n    }\n    images_service.getImages();\n    $rootScope.images_promise.promise.then(function (response) { //获取镜像之后执行\n        console.log(response.data.images);\n        $scope.images = response.data.images;\n        $http({\n            url: \"/api/list_servers/detail\", //获取云主机列表\n            method: 'GET',\n            headers: $rootScope.headers\n        }).then(function (response) {\n            var data = response.data.servers;\n            console.log(data);\n            angular.forEach(data, function (value, key) {\n                var item = {};\n                item.ipData = [];\n                angular.forEach(value.addresses, function (value, key) { //获取IP\n                    angular.forEach(value, function (value, key) {\n                        console.log(value);\n                        item.ipData.push(value);\n                    });\n                });\n                item.flavor = reachFlover(value); //配置类型\n                item.name = value.name; //云主机名称\n                item.id = value.id; //云主机id\n                var imageId = value.image.id; //镜像ID\n                resetState(item, value); //获取任务状态\n                reachImage(item, imageId); //查找备份名称\n\n                if (value['OS-EXT-STS:task_state'] == null) {\n                    $http({ //获取vnc地址\n                        url: '/api/server_action/' + value.id,\n                        method: 'POST',\n                        headers: $rootScope.headers,\n                        data: {\n                            \"os-getVNCConsole\": {\n                                \"type\": \"novnc\"\n                            }\n                        }\n\n                    }).then(function (response) {\n                        item.vnc = response.data.console.url;\n                    }, function (response) {\n                        alert(response.statusText);\n                    });\n\n                }\n\n                $scope.cloudHost.push(item);\n\n                if (value['OS-EXT-STS:task_state'] != null) { //如果有任务正在执行那就要监听这个任务状态\n                    $scope['intervalInit' + key] = $interval(function () {\n                        $http({\n                            url: '/api/list_servers/' + item.id,\n                            method: 'GET',\n                            headers: $rootScope.headers\n                        }).then(function (success) {\n                            console.log(success);\n                            var data = success.data.server;\n                            resetState($scope.cloudHost[key], data); //更新任务状态\n                            $scope.cloudHost[key].flavor = reachFlover(data); //更新配置\n                            if (data['OS-EXT-STS:task_state'] == null) {\n                                $scope.cloudHost[key].ipData = []; //IP地址初始化\n                                $scope.cloudHost[key].vnc = ''; //vnc地址初始化\n                                angular.forEach(data.addresses, function (value) { //获取IP\n                                    angular.forEach(value, function (value) {\n                                        $scope.cloudHost[key].ipData.push(value);\n                                        console.log($scope.cloudHost[key].ipData);\n                                    });\n                                });\n                                $interval.cancel($scope['intervalInit' + key]);\n                                $scope['intervalInit' + key] = null;\n                                $http({ //获取vnc地址\n                                    url: '/api/server_action/' + value.id,\n                                    method: 'POST',\n                                    headers: $rootScope.headers,\n                                    data: {\n                                        \"os-getVNCConsole\": {\n                                            \"type\": \"novnc\"\n                                        }\n                                    }\n\n                                }).then(function (response) {\n                                    $scope.cloudHost[key].vnc = response.data.console.url;\n                                }, function (response) {\n                                    alert(response.statusText);\n                                });\n                            }\n                        }, function (error) {\n                            alert(error.statusText);\n                        });\n                    }, 1000);\n                }\n                $scope.$on('ngRepeatFinished', function (ngRepeatFinishedEvent) {\n                    //you also get the actual event object\n                    //do stuff, execute functions -- whatever...\n                    $('#config' + key).popover({\n                        html: true,\n                        content: '<table class=\"table table-bordered table-striped table-condensed\">' +\n                        '<tbody>' +\n                        '<tr>' +\n                        '<td width=\"100px\">VCPUs</td>' +\n                        '<td width=\"100px\">' + item.flavor.vcpus +\n                        '</td>' +\n                        '</tr>' +\n                        '<tr>' +\n                        '<td>内存</td>' +\n                        '<td>' + item.flavor.ram / 1024 + '</td>' +\n                        '</tr>' +\n                        '<tr>' +\n                        '<td>大小</td>' +\n                        '<td>' + item.flavor.disk + '</td>' +\n                        '</tr>' +\n                        '</tbody>' +\n                        '</table>'\n                    });\n                });\n            });\n        }, function (response) {\n            alert(response.statusText);\n        });\n\n    });\n\n\n    $scope.deleteCloud = function (cloudId, name, index) { //删除云主机\n        if (confirm('您确定删除' + name + '吗？此操作不可恢复！')) {\n            $http({\n                url: '/api/list_servers/' + cloudId,\n                method: 'DELETE',\n                headers: $rootScope.headers\n            }).then(function (response) {\n                if (response.status == 204) {\n                    alert('操作成功');\n                    $scope.cloudHost.splice(index, 1);\n                }\n            }, function (response) {\n                alert(response.statusText);\n            });\n        }\n\n    };\n    $scope.restartComputer = function (cloudId, key) { //重启\n        $http({\n            url: '/api/server_action/' + cloudId,\n            method: 'POST',\n            headers: $rootScope.headers,\n            data: {\n                \"reboot\": {\n                    \"type\": \"HARD\"\n                }\n            }\n        }).then(function (response) {\n            console.log(response);\n            if (response.status == 202) {\n                alert($scope.cloudHost[key].name + '重启成功');\n                $scope['restartComputer' + key] = $interval(function () {\n                    $http({\n                        url: '/api/list_servers/' + cloudId,\n                        method: 'GET',\n                        headers: $rootScope.headers\n                    }).then(function (success) {\n                        console.log(success);\n                        var data = success.data.server;\n                        resetState($scope.cloudHost[key], data);\n                        if (data['OS-EXT-STS:task_state'] == null) {\n                            $interval.cancel($scope['restartComputer' + key]);\n                            $scope['restartComputer' + key] = null;\n                        }\n                    }, function (error) {\n                        alert(error.statusText);\n                    });\n                }, 1000);\n            }\n        }, function (response) {\n            alert(response.statusText);\n        });\n    };\n    $scope.all_check = false; //全选按钮状态\n    $scope.allCheck = function (status) { //父选项\n        all_check_service.allCheck(status, $scope.cloudHost);\n    };\n    $scope.itemCheck = function () { //子选项\n        all_check_service.itemCheck($scope, $scope.cloudHost);\n    };\n\n    $scope.changeConfig = function () { //进度条\n        if($scope.newConfig){\n            $scope.coresChangeProgress = $scope.newConfig.vcpus - $scope.oldConfig.vcpus;\n            $scope.ramChangeProgress = $scope.newConfig.ram / 1024 - $scope.oldConfig.ram / 1024;\n            $scope.showConfig = $scope.newConfig;\n        }else{\n            $scope.showConfig = $scope.oldConfig;\n            $scope.coresChangeProgress = 0;\n            $scope.ramChangeProgress = 0;\n        }\n    };\n    $scope.resetConfigInfo = function (info, key) { //调整配置弹框\n        $scope.newConfig = ''; //初始化云主机类型选择项\n        $scope.coresChangeProgress = 0; //初始化进度条\n        $scope.ramChangeProgress = 0; //初始化进度条\n        $scope.canSelectFlavors = angular.copy($rootScope.flavors); //深拷贝云主机类型\n        $scope.canSelectFlavors.splice(reachFloverIndex(info.flavor.id), 1); //除去现在的配置类型方便用户选择\n        $scope.showConfig = info.flavor;//初始化方案详情表格\n        $scope.cloudId = info.id;//当前操作云主机Id\n        $scope.oldConfig = info.flavor; //旧配置类型\n        $scope.key = key; //获取当前操作的index\n        count_service.getCount(); //获取最新的云主机使用情况\n    };\n    $scope.submitConfig = function () { //修改配置提交\n        console.log($scope.cloudId);\n        console.log($scope.newConfig);\n        console.log($scope.diskConfig);\n        $http({  //调整配置提交\n            url: '/api/server_action/' + $scope.cloudId,\n            method: 'POST',\n            headers: $rootScope.headers,\n            data: {\n                \"resize\": {\n                    \"flavorRef\": $scope.newConfig.id,\n                    \"OS-DCF:diskConfig\": $scope.diskConfig\n                }\n            }\n\n        }).then(function (response) {\n            console.log(response);\n            $('#reset_config').modal('hide');\n\n            $scope.intervalConfig = $interval(function () { //提交调整配置后监听状态\n                $http({\n                    url: '/api/list_servers/' + $scope.cloudId,\n                    method: 'GET',\n                    headers: $rootScope.headers\n                }).then(function (success) {\n                    console.log(success);\n                    var data = success.data.server;\n                    resetState($scope.cloudHost[$scope.key], data);//更新任务状态\n                    $scope.cloudHost[$scope.key].flavor = reachFlover(data); //更新配置\n                    if (data['OS-EXT-STS:task_state'] == null) {\n                        $interval.cancel($scope.intervalConfig);\n                        $scope.intervalConfig = null;\n                    }\n                }, function (error) {\n                    alert(error.statusText);\n                });\n            }, 1000);\n\n        }, function (response) {\n            alert(response.statusText);\n        });\n\n    };\n    $scope.confirmConfig = function (cloudId, key) { //确认迁移\n        $http({\n            url: '/api/server_action/' + cloudId,\n            method: 'POST',\n            headers: $rootScope.headers,\n            data: {\n                \"confirmResize\": null\n            }\n        }).then(function (response) {\n            console.log(response);\n            $scope.intervalConfirmConfig = $interval(function () {\n                $http({\n                    url: '/api/list_servers/' + cloudId,\n                    method: 'GET',\n                    headers: $rootScope.headers\n                }).then(function (success) {\n                    console.log(success);\n                    var data = success.data.server;\n                    resetState($scope.cloudHost[key], data);\n                    if (data['OS-EXT-STS:vm_state'] == \"stopped\") {\n                        $interval.cancel($scope.intervalConfirmConfig);\n                        $scope.intervalConfirmConfig = null;\n                        $state.go('count.cloudComputer', {}, {reload: true});\n                    }\n                }, function (error) {\n                    alert(error.statusText);\n                });\n            }, 1000);\n        }, function (response) {\n            alert(response.statusText);\n        });\n    };\n\n    $scope.returnConfig = function (cloudId, key) {  //回退配置\n        $http({\n            url: '/api/server_action/' + cloudId,\n            method: 'POST',\n            headers: $rootScope.headers,\n            data: {\n                \"revertResize\": null\n            }\n        }).then(function (response) {\n            console.log(response);\n            $state.go('count.cloudComputer', {}, {reload: true});\n        }, function (response) {\n            alert(response.statusText);\n        });\n    };\n    $scope.reconstruction = function (cloudId, key) { //重建云主机获取当前操作云主机ID\n        $scope.cloudId = cloudId;//当前操作云主机Id\n        $scope.key = key;\n        console.log($scope.key);\n        $scope.selectImage = '';\n    };\n\n    $scope.submitResetCloudComputer = function () { //重建云主机\n        console.log($scope.selectImage);\n        $http({\n            url: '/api/server_action/' + $scope.cloudId,\n            method: 'POST',\n            headers: $rootScope.headers,\n            data: {\n                \"rebuild\": {\n                    \"imageRef\": $scope.selectImage\n                }\n            }\n        }).then(function (response) {\n            console.log(response);\n            if (response.status == 202) {\n                $('#reset_cloud_computer').modal('hide');\n                reachImage($scope.cloudHost[$scope.key], $scope.selectImage);\n                $scope.intervalReconstruction = $interval(function () {\n                    $http({\n                        url: '/api/list_servers/' + $scope.cloudId,\n                        method: 'GET',\n                        headers: $rootScope.headers\n                    }).then(function (success) {\n                        console.log(success);\n                        var data = success.data.server;\n                        resetState($scope.cloudHost[$scope.key], data);\n\n                        if (data['OS-EXT-STS:task_state'] == null) {\n                            $interval.cancel($scope.intervalReconstruction);\n                            $scope.intervalReconstruction = null;\n                        }\n                    }, function (error) {\n                        alert(error.statusText);\n                    });\n                }, 1000);\n            }\n        }, function (response) {\n            alert(response.statusText);\n        });\n    };\n\n    $scope.showCloud = function (cloud_name) { //根据搜索内容显示隐藏\n        if ($scope.searchCloud) {\n            if (cloud_name.indexOf($scope.searchCloud) != -1) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    };\n\n    $scope.toggleComputer = function (status, cloudId, key, name) { //开关机切换\n        var keystr = \"os-\" + status;\n        var json = {};\n        json[keystr] = null;\n        $http({\n            url: '/api/server_action/' + cloudId,\n            method: 'POST',\n            headers: $rootScope.headers,\n            data: json\n        }).then(function (success) {\n            console.log(success);\n            $scope['intervalToggle' + key] = $interval(function () {\n                $http({\n                    url: '/api/list_servers/' + cloudId,\n                    method: 'GET',\n                    headers: $rootScope.headers\n                }).then(function (success) {\n                    console.log(success);\n                    var data = success.data.server;\n                    resetState($scope.cloudHost[key], data);\n                    if (data['OS-EXT-STS:task_state'] == null) {\n                        $interval.cancel($scope['intervalToggle' + key]);\n                        $scope['intervalToggle' + key] = null;\n                    }\n                }, function (error) {\n                    alert(error.statusText);\n                });\n            }, 1000);\n        }, function (error) {\n            alert(error.statusText);\n        });\n    };\n}]);\n"]}