{"version":3,"sources":["../js/controller/cloudComputer.js"],"names":["private_cloud","controller","$scope","$sce","$rootScope","$http","all_check_service","$q","$timeout","$window","$interval","$location","count_service","resetState","obj","data","vm","state","text","vm_state","task","task_state","power","power_state","reachImage","imageId","angular","forEach","images","value","key","id","imageName","name","url","path","warn","warnText","building","active","rescued","paused","suspended","stopped","soft_deleted","hard_deleted","resized","error","null","image_snapshotting","image_backingup","pausing","unpausing","suspending","resuming","deleting","stopping","starting","rescuing","unrescuing","rebuilding","powering_on","powering_off","resizing","resize_confirming","scheduling","block_device_mapping","networking","spawning","reboot_started_hard","rebuild_spawning","powering-off","resize_finish","0","1","3","4","6","7","cloudHost","images_promise","promise","then","method","headers","response","servers","console","log","item","ipData","addresses","push","flavors","flavor","config","image","diskConfig","os-getVNCConsole","type","vnc","alert","statusText","success","server","cancel","$on","ngRepeatFinishedEvent","$","popover","html","content","vcpus","ram","disk","deleteCloud","cloudId","index","confirm","status","splice","restartComputer","reboot","all_check","allCheck","itemCheck","changeConfig","newConfig","coresChangeProgress","oldConfig","ramChangeProgress","resetConfigInfo","getCount","submitConfig","resize","flavorRef","OS-DCF:diskConfig","modal","intervalConfig","confirmConfig","confirmResize","location","reload","returnConfig","revertResize","reconstruction","selectImage","submitResetCloudComputer","rebuild","imageRef","intervalReconstruction","searchCloud","showCloud","cloud_name","indexOf","toggleComputer","json"],"mappings":"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","file":"cloudComputer.min.js","sourcesContent":["/**\n * Created by chenzhongying on 2018/1/5.\n */\nprivate_cloud.controller('cloudComputerController', ['$scope', '$sce', '$rootScope', '$http', 'all_check_service', '$q', '$timeout', '$window', '$interval', '$location', 'count_service', function ($scope, $sce, $rootScope, $http, all_check_service, $q, $timeout, $window, $interval, $location, count_service) {\n    $scope.url = $location.path();\n    $scope.warn = false;//警告框\n    $scope.warnText = [];//警告文字\n    $scope.vm_state = { //云主机状态\n        building: '创建中',\n        active: '运行中',\n        rescued: '灾备运行',\n        paused: '暂停',\n        suspended: '挂起',\n        stopped: '停止',\n        soft_deleted: '软删除',\n        hard_deleted: '应删除',\n        resized: '确认/回退(调整配置)? ',\n        error: '错误'\n    };\n    $scope.task_state = { //任务\n        null: '无',\n        building: '孵化',\n        image_snapshotting: '正在创建快找',\n        image_backingup: '备份',\n        pausing: '暂停',\n        unpausing: '暂停恢复',\n        suspending: '正在挂起',\n        resuming: '挂起恢复',\n        deleting: '正在删除',\n        stopping: '正在停止',\n        starting: '正在启动',\n        rescuing: '灾难恢复',\n        unrescuing: '灾难复原',\n        rebuilding: '正在重建',\n        powering_on: '打开电源',\n        powering_off: '关闭电源',\n        resizing: '调整配置',\n        resize_confirming: '配置调整确认',\n        scheduling: '调度',\n        block_device_mapping: '块设备映射',\n        networking: '网络映射',\n        spawning: '正在生成',\n        reboot_started_hard: '正在重启',\n        rebuild_spawning: '重建孵化中',\n        \"powering-off\": '正在关闭电源',\n        resize_finish:'已经重建'\n    };\n    $scope.power_state = { //电池状态\n        0: '无',\n        1: '运行中',\n        3: '暂停',\n        4: '关闭',\n        6: '崩溃',\n        7: '挂起'\n    };\n    $scope.cloudHost = [];//云主机列表\n\n    function resetState(obj, data) { //开关机或新建时重置任务状态\n        obj.vm = { //云主机状态\n            state: data['OS-EXT-STS:vm_state'],\n            text: $scope.vm_state[data['OS-EXT-STS:vm_state']]\n        };\n        obj.task = { //任务状态\n            state: data['OS-EXT-STS:task_state'],\n            text: $scope.task_state[data['OS-EXT-STS:task_state']]\n        };\n        obj.power = { //电源状态\n            state: data['OS-EXT-STS:power_state'],\n            text: $scope.power_state[data['OS-EXT-STS:power_state']]\n        };\n    }\n\n    function reachImage(obj, imageId) { //查找镜像名称\n        angular.forEach($rootScope.images, function (value, key) {\n            if (imageId == value.id) {\n                obj.imageName = value.name; //镜像名称\n            }\n        });\n    }\n\n    $rootScope.images_promise.promise.then(function () { //获取镜像之后执行\n        $http({\n            url: \"/api/list_servers/detail\", //获取云主机列表\n            method: 'GET',\n            headers: $rootScope.headers\n        }).then(function (response) {\n            var data = response.data.servers;\n            console.log(data);\n            angular.forEach(data, function (value, key) {\n                var item = {};\n                item.ipData = [];\n                angular.forEach(value.addresses, function (value, key) { //获取IP\n                    angular.forEach(value, function (value, key) {\n                        console.log(value);\n                        item.ipData.push(value);\n                    });\n                });\n                // item.flavorId = value.flavor.id; //配置ID\n                angular.forEach($rootScope.flavors, function (flavor) {\n                    if (flavor.id == value.flavor.id) {\n                        item.config = flavor; //配置\n                    }\n                });\n                item.name = value.name; //云主机名称\n                item.id = value.id; //云主机id\n                var imageId = value.image.id; //镜像ID\n                resetState(item, value); //获取任务状态\n                item.diskConfig = value['OS-DCF:diskConfig']; //磁盘分区\n                console.log(item);\n                reachImage(item, imageId); //查找备份名称\n\n                if (value['OS-EXT-STS:task_state'] == null) {\n                    $http({ //获取vnc地址\n                        url: '/api/server_action/' + value.id,\n                        method: 'POST',\n                        headers: $rootScope.headers,\n                        data: {\n                            \"os-getVNCConsole\": {\n                                \"type\": \"novnc\"\n                            }\n                        }\n\n                    }).then(function (response) {\n                        item.vnc = response.data.console.url;\n                    }, function (response) {\n                        alert(response.statusText);\n                    });\n\n                }\n\n                $scope.cloudHost.push(item);\n                if (value['OS-EXT-STS:task_state'] != null) { //如果有任务正在执行那就要监听这个任务状态\n                    $scope['intervalInit' + key] = $interval(function () {\n                        $http({\n                            url: '/api/list_servers/' + item.id,\n                            method: 'GET',\n                            headers: $rootScope.headers\n                        }).then(function (success) {\n                            console.log(success);\n                            var data = success.data.server;\n                            resetState($scope.cloudHost[key], data);\n\n                            if (data['OS-EXT-STS:task_state'] == null) {\n                                $scope.cloudHost[key].ipData = []; //IP地址初始化\n                                $scope.cloudHost[key].vnc = ''; //vnc地址初始化\n\n                                console.log(data.addresses);\n                                angular.forEach(data.addresses, function (value) { //获取IP\n                                    angular.forEach(value, function (value) {\n                                        $scope.cloudHost[key].ipData.push(value);\n                                        console.log($scope.cloudHost[key].ipData);\n                                    });\n                                });\n                                console.log($scope.cloudHost[key].ipData);\n                                $interval.cancel($scope['intervalInit' + key]);\n                                $scope['intervalInit' + key] = null;\n                                $http({ //获取vnc地址\n                                    url: '/api/server_action/' + value.id,\n                                    method: 'POST',\n                                    headers: $rootScope.headers,\n                                    data: {\n                                        \"os-getVNCConsole\": {\n                                            \"type\": \"novnc\"\n                                        }\n                                    }\n\n                                }).then(function (response) {\n                                    $scope.cloudHost[key].vnc = response.data.console.url;\n                                }, function (response) {\n                                    // alert(response.data.error.message);\n                                });\n                            }\n                        }, function (error) {\n\n                        });\n                    }, 2000);\n                }\n                $scope.$on('ngRepeatFinished', function (ngRepeatFinishedEvent) {\n                    //you also get the actual event object\n                    //do stuff, execute functions -- whatever...\n                    $('#config' + key).popover({\n                        html: true,\n                        content: '<table class=\"table table-bordered table-striped table-condensed\">' +\n                        '<tbody>' +\n                        '<tr>' +\n                        '<td width=\"100px\">VCPUs</td>' +\n                        '<td width=\"100px\">' + item.config.vcpus +\n                        '</td>' +\n                        '</tr>' +\n                        '<tr>' +\n                        '<td>内存</td>' +\n                        '<td>' + item.config.ram / 1024 + '</td>' +\n                        '</tr>' +\n                        '<tr>' +\n                        '<td>大小</td>' +\n                        '<td>' + item.config.disk + '</td>' +\n                        '</tr>' +\n                        '</tbody>' +\n                        '</table>'\n                    });\n                });\n            });\n        }, function (response) {\n             alert(response.statusText);\n        });\n\n    }, function () {\n\n    });\n\n\n    $scope.deleteCloud = function (cloudId, name, index) { //删除云主机\n        if (confirm('您确定删除' + name + '吗？此操作不可恢复！')) {\n            $http({\n                url: '/api/list_servers/' + cloudId,\n                method: 'DELETE',\n                headers: $rootScope.headers\n            }).then(function (response) {\n                if (response.status == 204) {\n                    alert('操作成功');\n                    $scope.cloudHost.splice(index, 1);\n                }\n            }, function () {\n                alert('操作失败请重试');\n            });\n        }\n\n    };\n    $scope.restartComputer = function (cloudId, key) { //重启\n        $http({\n            url: '/api/server_action/' + cloudId,\n            method: 'POST',\n            headers: $rootScope.headers,\n            data: {\n                \"reboot\": {\n                    \"type\": \"HARD\"\n                }\n            }\n        }).then(function (response) {\n            console.log(response);\n            if (response.status == 202) {\n                alert($scope.cloudHost[key].name + '重启成功');\n                $scope['restartComputer' + key] = $interval(function () {\n                    $http({\n                        url: '/api/list_servers/' + cloudId,\n                        method: 'GET',\n                        headers: $rootScope.headers\n                    }).then(function (success) {\n                        console.log(success);\n                        var data = success.data.server;\n                        resetState($scope.cloudHost[key], data);\n                        if (data['OS-EXT-STS:task_state'] == null) {\n                            $interval.cancel($scope['restartComputer' + key]);\n                            $scope['restartComputer' + key] = null;\n                        }\n                    }, function (error) {\n                        alert(error.statusText);\n                    });\n                }, 2000);\n            }\n        }, function (response) {\n            alert(response.statusText);\n        });\n    };\n    $scope.all_check = false; //全选按钮状态\n    console.log($scope.all_check);\n    $scope.allCheck = function (status) { //父选项\n        all_check_service.allCheck(status, $scope.cloudHost);\n    };\n    $scope.itemCheck = function () { //子选项\n        all_check_service.itemCheck($scope, $scope.cloudHost);\n    };\n\n    $scope.changeConfig = function (newConfig) { //进度条\n        $scope.coresChangeProgress = newConfig.vcpus - $scope.oldConfig.vcpus;\n        $scope.ramChangeProgress = newConfig.ram / 1024 - $scope.oldConfig.ram / 1024;\n    };\n    $scope.resetConfigInfo = function (config, diskConfig, cloudId, key) { //调整配置弹框\n        $scope.newConfig = config;//初始化新云主机类型\n        $scope.diskConfig = diskConfig;//当前操作磁盘分区\n        $scope.cloudId = cloudId;//当前操作云主机Id\n        $scope.oldConfig = config; //旧配置类型\n        $scope.key = key;\n        console.log($scope.newConfig);\n        count_service.getCount();\n    };\n    $scope.submitConfig = function () { //修改配置提交\n        console.log($scope.cloudId);\n        console.log($scope.newConfig);\n        console.log($scope.diskConfig);\n        $http({  //调整配置提交\n            url: '/api/server_action/' + $scope.cloudId,\n            method: 'POST',\n            headers: $rootScope.headers,\n            data: {\n                \"resize\": {\n                    \"flavorRef\": $scope.newConfig.id,\n                    \"OS-DCF:diskConfig\": $scope.diskConfig\n                }\n            }\n\n        }).then(function (response) {\n            console.log(response);\n            $('#reset_config').modal('hide');\n            $scope.intervalConfig = $interval(function () { //提交调整配置后监听状态\n                $http({\n                    url: '/api/list_servers/' + $scope.cloudId,\n                    method: 'GET',\n                    headers: $rootScope.headers\n                }).then(function (success) {\n                    console.log(success);\n                    var data = success.data.server;\n                    resetState($scope.cloudHost[$scope.key], data);\n\n                    if (data['OS-EXT-STS:task_state'] == null) {\n                        $interval.cancel($scope.intervalConfig);\n                        $scope.intervalConfig = null;\n                    }\n                }, function (error) {\n                    alert(error.statusText);\n                });\n            }, 2000);\n\n        }, function (response) {\n            alert(response.statusText);\n        });\n\n    };\n    $scope.confirmConfig = function (cloudId,key) { //确认迁移\n        $http({\n            url: '/api/server_action/' + cloudId,\n            method: 'POST',\n            headers: $rootScope.headers,\n            data: {\n                \"confirmResize\": null\n            }\n        }).then(function (response) {\n            console.log(response);\n            $window.location.reload();\n            /*$scope.intervalConfirmConfig = $interval(function () {\n                $http({\n                    url: '/api/list_servers/' + cloudId,\n                    method: 'GET',\n                    headers: $rootScope.headers\n                }).then(function (success) {\n                    console.log(success);\n                    var data = success.data.server;\n                    resetState($scope.cloudHost[key], data);\n                    angular.forEach($rootScope.flavors, function (flavor) {\n                        if (flavor.id == data.flavor.id) {\n                            $scope.cloudHost[key].config = flavor; //配置\n                        }\n                    });\n\n                     if (data['OS-EXT-STS:task_state'] == null) {\n                     $interval.cancel($scope.intervalConfirmConfig);\n                     $scope.intervalConfirmConfig = null;\n                     }\n                }, function (error) {\n                    alert(error.statusText);\n                });\n            }, 2000);*/\n\n        }, function (response) {\n            alert(response.statusText);\n        });\n    };\n\n    $scope.returnConfig = function(cloudId){  //回退配置\n        $http({\n            url: '/api/server_action/' + cloudId,\n            method: 'POST',\n            headers: $rootScope.headers,\n            data: {\n                \"revertResize\" : null\n            }\n        }).then(function (response) {\n            console.log(response);\n            $window.location.reload();\n        }, function (response) {\n            alert(response.statusText);\n        });\n    };\n    $scope.reconstruction = function (cloudId, key) { //重建云主机获取当前操作云主机ID\n        $scope.cloudId = cloudId;//当前操作云主机Id\n        $scope.key = key;\n        console.log($scope.key);\n        $scope.selectImage = '';\n    };\n\n    $scope.submitResetCloudComputer = function () { //重建云主机\n        console.log($scope.selectImage);\n        $http({\n            url: '/api/server_action/' + $scope.cloudId,\n            method: 'POST',\n            headers: $rootScope.headers,\n            data: {\n                \"rebuild\": {\n                    \"imageRef\": $scope.selectImage\n                }\n            }\n        }).then(function (response) {\n            console.log(response);\n            if (response.status == 202) {\n                $('#reset_cloud_computer').modal('hide');\n                reachImage($scope.cloudHost[$scope.key], $scope.selectImage);\n                $scope.intervalReconstruction = $interval(function () {\n                    $http({\n                        url: '/api/list_servers/' + $scope.cloudId,\n                        method: 'GET',\n                        headers: $rootScope.headers\n                    }).then(function (success) {\n                        console.log(success);\n                        var data = success.data.server;\n                        resetState($scope.cloudHost[$scope.key], data);\n\n                        if (data['OS-EXT-STS:task_state'] == null) {\n                            $interval.cancel($scope.intervalReconstruction);\n                            $scope.intervalReconstruction = null;\n                        }\n                    }, function (error) {\n                        alert(error.statusText);\n                    });\n                }, 2000);\n            }\n        }, function (response) {\n            alert(response.statusText);\n        });\n    };\n    $scope.searchCloud = '';\n    $scope.showCloud = function (cloud_name) {\n        if ($scope.searchCloud) {\n            if (cloud_name.indexOf($scope.searchCloud) != -1) {\n                return true;\n            } else {\n                return false;\n            }\n        } else {\n            return true;\n        }\n    };\n\n\n    $scope.toggleComputer = function (status, cloudId, key, name) {\n        var keystr = \"os-\" + status;\n        var json = {};\n        json[keystr] = null;\n        $http({\n            url: '/api/server_action/' + cloudId,\n            method: 'POST',\n            headers: $rootScope.headers,\n            data: json\n        }).then(function (success) {\n            console.log(success);\n            $scope['intervalToggle' + key] = $interval(function () {\n                $http({\n                    url: '/api/list_servers/' + cloudId,\n                    method: 'GET',\n                    headers: $rootScope.headers\n                }).then(function (success) {\n                    console.log(success);\n                    var data = success.data.server;\n                    resetState($scope.cloudHost[key], data);\n                    if (data['OS-EXT-STS:task_state'] == null) {\n                        $interval.cancel($scope['intervalToggle' + key]);\n                        $scope['intervalToggle' + key] = null;\n                    }\n                }, function (error) {\n                    alert(error.statusText);\n                });\n            }, 2000);\n        }, function (error) {\n            alert(error.statusText);\n            /* console.log(error);\n             $scope.warn = true;\n             $scope.warnText.push('错误' + error.status + ' 云主机：' + name + '操作失败');*/\n        });\n\n    };\n\n\n}]);\n"]}