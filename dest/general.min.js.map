{"version":3,"sources":["../js/controller/general.js"],"names":["private_cloud","controller","$scope","$rootScope","$http","$q","count_service","volume_service","get_used_network_promise","defer","getCount","count_promise","promise","then","data","console","log","count","safe","getVolume","volume_promise","storage","url","method","headers","response","quotas","networkTotalData","network","floatingips","title","total","floatingip","unit","routers","router","ports","port","networks","subnets","subnet","resolve","alert","error","message","angular","forEach","value","key","length","used"],"mappings":";AAIAA,cAAcC,WAAW,uBAAsB,UAAU,cAAc,SAAQ,MAAK,iBAAgB,kBAAiB,SAAUC,GAAQC,GAAYC,GAAMC,GAAGC,GAAcC;IACtKL,EAAOM,2BAA2BH,EAAGI,SACrCH,EAAcI,YACdP,EAAWQ,cAAcC,QAAQC,KAAK,SAASC;QAC3CC,QAAQC,IAAIF,IACZZ,EAAOe,QAAQH,EAAKG,OACpBf,EAAOgB,OAAOJ,EAAKI;QAEvBX,EAAeY,aACfhB,EAAWiB,eAAeR,QAAQC,KAAK,SAASC;QAC5CC,QAAQC,IAAIF,IACZZ,EAAOmB,UAAUP;QAErBV;QACIkB,KAAK;QACLC,QAAQ;QACRC,SAAQrB,EAAWqB;OACpBX,KAAK,SAAUY;QACdV,QAAQC,IAAIS,EAASX,KAAKY,OAAO;QACjC,IAAIC,IAAmBF,EAASX,KAAKY,OAAO;QAC5CxB,EAAO0B;YAECC;gBACIC,OAAM;gBACNC,OAAMJ,EAAiBK;gBACvBC,MAAK;;YAETC;gBACIJ,OAAM;gBACNC,OAAMJ,EAAiBQ;gBACvBF,MAAK;;YAETG;gBACIN,OAAM;gBACNC,OAAMJ,EAAiBU;gBACvBJ,MAAK;;YAETK;gBACIR,OAAM;gBACNC,OAAMJ,EAAiBC;gBACvBK,MAAK;;YAETM;gBACIT,OAAM;gBACNC,OAAMJ,EAAiBa;gBACvBP,MAAK;;WAGjBlB,QAAQC,IAAId,EAAO0B,UACnB1B,EAAOM,yBAAyBiC;OAClC,SAAShB;QACPV,QAAQC,IAAIS,IACZiB,MAAMjB,EAASX,KAAK6B,MAAMC;QAE9B1C,EAAOM,yBAAyBI,QAAQC,KAAK;QAC1CgC,QAAQC,QAAQ5C,EAAO0B,SAAQ,SAASmB,GAAMC;YAC1CjC,QAAQC,IAAIgC,IACZ5C;gBACIkB,KAAK,cAAY0B;gBACjBzB,QAAQ;gBACRC,SAAQrB,EAAWqB;eACpBX,KAAK,SAAUY;gBACdV,QAAQC,IAAIS,EAASX,KAAKkC,GAAKC,SAC/B/C,EAAO0B,QAAQoB,GAAKE,OAAOzB,EAASX,KAAKkC,GAAKC;eAEhD,SAASxB;gBACPV,QAAQC,IAAIS,IACZiB,MAAMjB,EAASX,KAAK6B,MAAMC","file":"general.min.js","sourcesContent":["/**\n * Created by chenzhongying on 2018/1/5.\n */\n\nprivate_cloud.controller('generalController', ['$scope', '$rootScope', '$http','$q','count_service','volume_service',function ($scope, $rootScope, $http,$q,count_service,volume_service) {\n    $scope.get_used_network_promise = $q.defer();\n    count_service.getCount(); //获取云主机防火墙信息\n    $rootScope.count_promise.promise.then(function(data){\n        console.log(data);\n        $scope.count = data.count;\n        $scope.safe = data.safe;\n    });\n    volume_service.getVolume(); //获取云主机防火墙信息\n    $rootScope.volume_promise.promise.then(function(data){\n        console.log(data);\n        $scope.storage = data;\n    });\n    $http({ //网络\n        url: '/api/net_quotas',\n        method: 'GET',\n        headers:$rootScope.headers\n    }).then(function (response) {\n        console.log(response.data.quotas[0]);\n        var networkTotalData = response.data.quotas[0];\n        $scope.network =\n            {\n                floatingips:{\n                    title:'公网IP',\n                    total:networkTotalData.floatingip,\n                    unit:'个'\n                },\n                routers:{\n                    title:'路由器',\n                    total:networkTotalData.router,\n                    unit:'个'\n                },\n                ports:{\n                    title:'端口',\n                    total:networkTotalData.port,\n                    unit:'个'\n                },\n                networks:{\n                    title:'网络',\n                    total:networkTotalData.network,\n                    unit:'个'\n                },\n                subnets:{\n                    title:'子网',\n                    total:networkTotalData.subnet,\n                    unit:'个'\n                }\n            };\n        console.log($scope.network);\n        $scope.get_used_network_promise.resolve();\n    },function(response){\n        console.log(response);\n        alert(response.data.error.message);\n    });\n    $scope.get_used_network_promise.promise.then(function(){\n       angular.forEach($scope.network,function(value,key){\n           console.log(key);\n           $http({         //已使用存储\n               url: '/api/net_'+key,\n               method: 'GET',\n               headers:$rootScope.headers\n           }).then(function (response) {\n               console.log(response.data[key].length);\n               $scope.network[key].used = response.data[key].length;\n\n           },function(response){\n               console.log(response);\n               alert(response.data.error.message);\n           });\n       });\n\n    });\n}]);"]}