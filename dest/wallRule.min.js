/*! cloud - v1.0.0 - 2018-03-05 */
private_cloud.controller("wallRuleController", [ "$rootScope", "$scope", "$http", "$state", "$timeout", function(e, a, t, r, p) {
    console.log(r), a.direction = {
        ingress: "入口",
        egress: "出口"
    }, a.ruleItems = [ {
        name: "定制TCP规则",
        type: "type1",
        value: "tcp"
    }, {
        name: "定制UDP规则",
        type: "type1",
        value: "udp"
    }, {
        name: "定制ICMP规则",
        type: "type2",
        value: "icmp"
    }, {
        name: "ALL ICMP",
        type: "type3",
        value: "all_icmp"
    }, {
        name: "ALL TCP",
        type: "type3",
        value: "all_tcp"
    }, {
        name: "ALL UDP",
        type: "type3",
        value: "all_udp"
    }, {
        name: "DNS",
        type: "type4",
        value: "tcp"
    }, {
        name: "HTTP",
        type: "type4",
        value: "tcp"
    }, {
        name: "HTTPS",
        type: "type4",
        value: "tcp"
    }, {
        name: "IMAP",
        type: "type4",
        value: "tcp"
    }, {
        name: "IMAPS",
        type: "type4",
        value: "tcp"
    }, {
        name: "LDAP",
        type: "type4",
        value: "tcp"
    }, {
        name: "MS SQL",
        type: "type4",
        value: "tcp"
    }, {
        name: "MYSQL",
        type: "type4",
        value: "tcp"
    }, {
        name: "POP3",
        type: "type4",
        value: "tcp"
    }, {
        name: "POP3S",
        type: "type4",
        value: "tcp"
    }, {
        name: "RDP",
        type: "type4",
        value: "tcp"
    }, {
        name: "SMTP",
        type: "type4",
        value: "tcp"
    }, {
        name: "SMTPS",
        type: "type4",
        value: "tcp"
    }, {
        name: "SSH",
        type: "type4",
        value: "tcp"
    } ], a.directionItems = [ {
        name: "入口",
        value: "ingress"
    }, {
        name: "出口",
        value: "egress"
    } ], a.portItems = [ {
        name: "端口",
        value: "port"
    }, {
        name: "端口范围",
        value: "range"
    } ], a.remoteItems = [ {
        name: "CIDR",
        value: "cidr"
    } ], a.selectItem = {
        port: "port"
    }, a.type1 = !0, a.ruleType = a.ruleItems[0], a.formData = {
        protocol: "tcp",
        direction: "ingress",
        ethertype: "IPv4",
        remote_ip_prefix: "0.0.0.0/0",
        security_group_id: r.params.id
    }, a.changeRule = function(e, t) {
        switch (console.log(e), a.formData.protocol = t, e) {
          case "type1":
            a.type1 = !0, a.type2 = !1, a.type3 = !1, a.type4 = !1;
            break;

          case "type2":
            a.type2 = !0, a.type1 = !1, a.type3 = !1, a.type4 = !1;
            break;

          case "type3":
            a.type3 = !0, a.type1 = !1, a.type2 = !1, a.type4 = !1;
            break;

          case "type4":
            a.type4 = !0, a.type1 = !1, a.type2 = !1, a.type3 = !1, a.formData.direction = "ingress";
        }
    }, t({
        url: "/api/list_segroups/" + r.params.id,
        headers: e.headers
    }).then(function(e) {
        console.log(e), a.name = e.data.security_group.name, a.rules = e.data.security_group.security_group_rules;
    }, function(e) {
        alert(e.statusText);
    }), a.deleteRule = function(a, r) {
        confirm("确定要删除规则吗？") && t({
            url: "/api/serules/" + a,
            method: "DELETE",
            headers: e.headers
        }).then(function(e) {
            console.log(e);
        }, function(e) {
            alert(e.statusText);
        });
    }, a.formSubmit = function(o) {
        switch (o.preventDefault(), a.formData.protocol) {
          case "dns":
            a.formData.port_range_min = a.icmpType, a.formData.port_range_max = a.icmpCode;
            break;

          case "dns":
            a.formData.port_range_min = 53, a.formData.port_range_max = 53;
            break;

          case "http":
            a.formData.port_range_min = 80, a.formData.port_range_max = 80;
            break;

          case "https":
            a.formData.port_range_min = 443, a.formData.port_range_max = 443;
            break;

          case "imap":
            a.formData.port_range_min = 143, a.formData.port_range_max = 143;
            break;

          case "imaps":
            a.formData.port_range_min = 993, a.formData.port_range_max = 993;
            break;

          case "ldap":
            a.formData.port_range_min = 389, a.formData.port_range_max = 389;
            break;

          case "ms_sql":
            a.formData.port_range_min = 1433, a.formData.port_range_max = 1433;
            break;

          case "mysql":
            a.formData.port_range_min = 3306, a.formData.port_range_max = 3306;
            break;

          case "pop3":
            a.formData.port_range_min = 110, a.formData.port_range_max = 110;
            break;

          case "pop3s":
            a.formData.port_range_min = 995, a.formData.port_range_max = 995;
            break;

          case "rdp":
            a.formData.port_range_min = 3389, a.formData.port_range_max = 3389;
            break;

          case "smtp":
            a.formData.port_range_min = 25, a.formData.port_range_max = 25;
            break;

          case "smtps":
            a.formData.port_range_min = 465, a.formData.port_range_max = 465;
            break;

          case "ssh":
            a.formData.port_range_min = 22, a.formData.port_range_max = 22;
        }
        t({
            url: "/api/serules/",
            headers: e.headers,
            method: "POST",
            data: {
                security_group_rule: a.formData
            }
        }).then(function(e) {
            console.log(e), $("#add_rule").modal("hide"), p(function() {
                r.go("security.rule", {
                    id: r.params.id
                }, {
                    reload: !0
                });
            }, 1e3);
        }, function(e) {
            alert(e.statusText);
        });
    };
} ]);
//# sourceMappingURL=wallRule.min.js.map