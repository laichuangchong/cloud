/*! cloud - v1.0.0 - 2018-03-05 */
private_cloud.service("tokenService", [ "$http", "$rootScope", "$timeout", function(e, t, o) {
    return {
        getToken: function(o, a) {
            e({
                url: "./apiv1",
                headers: {
                    "Content-Type": "application/json"
                },
                method: "POST",
                data: {
                    auth: {
                        identity: {
                            methods: [ "password" ],
                            password: {
                                user: {
                                    name: o,
                                    domain: {
                                        name: "Default"
                                    },
                                    password: a
                                }
                            }
                        },
                        scope: {
                            project: {
                                name: "admin",
                                domain: {
                                    name: "Default"
                                }
                            }
                        }
                    }
                }
            }).then(function(e) {
                console.log(e), window.localStorage.setItem("token", e.headers()["x-subject-token"]), 
                window.localStorage.setItem("project_id", e.data.token.project.id), window.localStorage.setItem("username", o), 
                window.localStorage.setItem("password", a), t.token_promise.resolve(e.headers()["x-subject-token"]);
            }, function(e) {
                alert(e.data.error.message);
            });
        }
    };
} ]), private_cloud.service("all_check_service", function() {
    return {
        allCheck: function(e, t) {
            e ? angular.forEach(t, function(e, t) {
                e.check_status = !0;
            }) : angular.forEach(t, function(e, t) {
                e.check_status = !1;
            });
        },
        itemCheck: function(e, t) {
            var o = !0;
            angular.forEach(t, function(t, a) {
                t.check_status || (e.all_check = !1, o = !1);
            }), o && (e.all_check = !0);
        }
    };
}), private_cloud.service("less_one_service", function() {
    return {
        change: function(e) {
            var t = !1;
            return angular.forEach(e, function(e, o) {
                e && (t = !0);
            }), !!t;
        }
    };
}), private_cloud.service("count_service", [ "$http", "$rootScope", "$q", function(e, t, o) {
    return {
        getCount: function() {
            t.count_promise = o.defer(), e({
                url: "/api/nova_limits",
                method: "GET",
                headers: t.headers
            }).then(function(e) {
                console.log(e.data.limits.absolute);
                var o = e.data.limits.absolute, a = {
                    count: {
                        instances: {
                            title: "云主机",
                            used: o.totalInstancesUsed,
                            total: o.maxTotalInstances,
                            unit: "个"
                        },
                        cores: {
                            title: "VCPUs",
                            used: o.totalCoresUsed,
                            total: o.maxTotalCores,
                            unit: "个"
                        },
                        ram: {
                            title: "内存",
                            used: o.totalRAMUsed / 1024,
                            total: o.maxTotalRAMSize / 1024,
                            unit: "GB"
                        }
                    },
                    safe: {
                        security: {
                            title: "防火墙",
                            used: o.totalSecurityGroupsUsed,
                            total: o.maxSecurityGroups,
                            unit: "个"
                        }
                    }
                };
                t.count_promise.resolve(a);
            }, function(e) {
                alert(e.statusText);
            });
        }
    };
} ]), private_cloud.service("cloud_service", [ "$http", "$rootScope", "$q", function(e, t, o) {
    return {
        getCloud: function() {
            t.cloud_promise = o.defer(), e({
                url: "/api/list_servers/detail",
                method: "GET",
                headers: t.headers
            }).then(function(e) {
                t.cloud_promise.resolve(e);
            }, function(e) {
                alert(e.statusText);
            });
        }
    };
} ]), private_cloud.service("images_service", [ "$http", "$rootScope", "$q", function(e, t, o) {
    return {
        getImages: function() {
            t.images_promise = o.defer(), e({
                url: "/api/list_images",
                method: "GET",
                headers: t.headers
            }).then(function(e) {
                console.log(e.data.images), t.images_promise.resolve(e);
            }, function(e) {
                alert(e.data.error.message);
            });
        }
    };
} ]), private_cloud.service("volume_service", [ "$http", "$rootScope", "$q", function(e, t, o) {
    return {
        getVolume: function() {
            t.volume_promise = o.defer(), e({
                url: "/api/volume_limits/" + localStorage.getItem("project_id"),
                method: "GET",
                headers: t.headers
            }).then(function(e) {
                console.log(e.data.limits.absolute);
                var o = e.data.limits.absolute, a = {
                    volumes: {
                        title: "云硬盘",
                        used: o.totalVolumesUsed,
                        total: o.maxTotalVolumes,
                        unit: "个"
                    },
                    gigabytes: {
                        title: "云硬盘容量",
                        used: o.totalGigabytesUsed,
                        total: o.maxTotalVolumeGigabytes,
                        unit: "GB"
                    }
                };
                t.volume_promise.resolve(a);
            }, function(e) {
                alert(e.data.error.message);
            });
        }
    };
} ]), private_cloud.service("subnets_service", [ "$http", "$rootScope", "$q", function(e, t, o) {
    return {
        getSubnets: function() {
            t.subnets_promise = o.defer(), e({
                url: "/api/net_subnets/",
                method: "GET",
                headers: t.headers
            }).then(function(e) {
                console.log(e), t.subnets_promise.resolve(e.data.subnets);
            }, function(e) {
                alert(e.data.error.message);
            });
        }
    };
} ]);
//# sourceMappingURL=service.min.js.map